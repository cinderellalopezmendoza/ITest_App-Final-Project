<resources xmlns:tools="http://schemas.android.com/tools">
    <string name="app_name">ITest App</string>

    //string for c++ intro
    <string name="intro_content">
        <![CDATA[<font color=#fc0303>What is C++?</font><br>
                    C++ is a cross-platform language that can be used to create high-performance applications.<br>
                    C++ was developed by Bjarne Stroustrup, as an extension to the C language.<br>
                    C++ gives programmers a high level of control over system resources and memory.<br>
                    The language was updated 3 major times in 2011, 2014, and 2017 to C++11, C++14, and C++17.<br><br>
                    <font color=#fc0303>Why use C++?</font><br>
                    C++ is one of the world\'s most popular programming languages.<br>
                    C++ can be found in today\'s operating systems, Graphical User Interfaces, and embedded systems.<br>
                    C++ is an object-oriented programming language which gives a clear structure to programs and allows code to be reused, lowering development costs.<br>
                    C++ is portable and can be used to develop applications that can be adapted to multiple platforms.<br>
                    C++ is fun and easy to learn!<br>
                    As C++ is close to C# and Java, it makes it easy for programmers to switch to C++ or vice versa.
                ]]>
       </string>


    //string for c++ syntax
    <string name="syntax_content">
        <![CDATA[Let\'s break up the following code to understand it better:<br><br>
                <h3><font color=#20a142>Example</font></h3><br>
                #include &lt;iostream&gt;  <br>
                using namespace std; <br><br>
                <font color=#1d70cf>int  </font>main() { <br>
                    "\t""\t""\t"cout << <font color=#ff0f0f> \"Hello World!\";  </font> <br>
                    "\t""\t""\t"<font color=#1d70cf>return  </font><font color=#ff0f0f>0;</font><br>
                  }
                ]]>
    </string>

    <string name="output_hello">
          <![CDATA[
                <font color=#1d70cf>Output:</font><br>
                "\t""\t""\t"<font color=#ff0f0f><b>Hello World!</b></font>
                ]]>
    </string>

    <string name="syntax_content1">
         <![CDATA[
                <b>Example explained</b></font><br>
                Line 1:</font> <font color=#ff0f0f>#include &lt;iostream&gt;</font> that lets us work with input and output objects, such as <font color=#ff0f0f>cout</font>
                (used in line 5). Header files add functionality to C++ programs.<br><br>
                Line 2:</font> <font color=#ff0f0f>using namespace std</font> means that we can use names for objects and variables from the standard library.<br><br>
                Line 3:</font> A blank line. C++ ignores white space.<br><br>
                Line 4:</font> Another thing that always appear in a C++ program, is <font color=#ff0f0f>int main()</font>. This is called a <font color=#161c70>function</font>.
                Any code inside its curly brackets <font color=#ff0f0f>{}</font> will be executed.<br><br>
                Line 5:</font> <font color=#ff0f0f>cout</font> (pronounced "see-out") is an <font color=#161c70>object</font> object used together with the insertion operator
                (<font color=#ff0f0f>&lt;&lt;</font>) to output/print text. In our example it will output \"Hello World\".<br><br>
                Note:</font> Every C++ statement ends with a semicolon <font color=#ff0f0f>;</font>.<br><br>
                Note:</font> The body of <font color=#ff0f0f>int main()</font> could also been written as:<br>
                <font color=#ff0f0f>int main () { cout &lt;&lt; \"Hello World!\"; return 0; }</font> <br><br>
                Remember:</font> The compiler ignores white spaces. However, multiple lines makes the code more readable.<br><br>
                Line 6:</font> <font color=#ff0f0f>return 0</font> ends the main function.<br><br>
                Line 7:</font> Do not forget to add the closing curly bracket <font color=#ff0f0f>}</font> to actually end the main function.<br><br>
                ]]>
    </string>


    //string for c++ output
    <string name="print_text_content">
          <![CDATA[The <font color=#ff0f0f>cout</font> object, together with the <font color=#ff0f0f>&lt;&lt;</font> operator, is used to output values/print text:<br><br><br>
                <h3><font color=#20a142>Example</font></h3><br>
                #include &lt;iostream&gt;  <br>
                using namespace std; <br><br>
                <font color=#1d70cf>int  </font>main() { <br>
                    "\t""\t""\t"cout << <font color=#ff0f0f> \"Hello World!\";  </font> <br>
                    "\t""\t""\t"<font color=#1d70cf>return  </font><font color=#ff0f0f>0;</font><br>
                  }
                ]]>
    </string>

    <string name="output_print_text">
         <![CDATA[
                <font color=#1d70cf>Output:</font><br>
                "\t""\t""\t"<font color=#ff0f0f><b>Hello World!</b></font>
                ]]>
    </string>

    <string name="note_content">
        <![CDATA[You can add as many <font color=#ff0f0f>cout</font> objects as you want. However, note that it does not insert a new line at the end of the output:<br><br><br>
                <h3><font color=#20a142>Example</font></h3><br>
                #include &lt;iostream&gt;  <br>
                using namespace std; <br><br>
                <font color=#1d70cf>int  </font>main() { <br>
                "\t""\t""\t"cout << <font color=#ff0f0f> \"Hello World!\";  </font> <br>
                "\t""\t""\t"cout << <font color=#ff0f0f> \"I am learning C++\";  </font> <br>
                "\t""\t""\t"<font color=#1d70cf>return  </font><font color=#ff0f0f>0;</font><br>
                 }
                ]]>
    </string>

    <string name="output_print_text1">
      <![CDATA[
                <font color=#1d70cf>Output:</font><br>
                "\t""\t""\t"<font color=#ff0f0f><b>Hello World!I am learning C++</b></font>
                ]]>
    </string>
    <string name="new_line_content">
     <![CDATA[
                <h2>New Lines</h2><br>
                To insert a new line, you can use the <font color=#ff0f0f>\\n</font> character:<br><br><br>
                <h3><font color=#20a142>Example</font></h3><br>
                #include &lt;iostream&gt;  <br>
                using namespace std; <br><br>
                <font color=#1d70cf>int  </font>main() { <br>
                    "\t""\t""\t"cout << <font color=#ff0f0f> \"Hello World! \\n\";  </font> <br>
                    "\t""\t""\t"cout << <font color=#ff0f0f> \"I am learning C++\";  </font> <br>
                    "\t""\t""\t"<font color=#1d70cf>return  </font><font color=#ff0f0f>0;</font><br>
                  }
                ]]>
    </string>
    <string name="output_new_line">
         <![CDATA[
                <font color=#1d70cf>Output:</font><br>
                "\t""\t""\t"<font color=#ff0f0f><b>Hello World!</b></font><br>
                "\t""\t""\t"<font color=#ff0f0f><b>I am learning C++</b></font>
                ]]>
    </string>
    <string name="tip_ex__content">
        <![CDATA[<b>Tip:</b> Two <font color=#ff0f0f>\\n</font> characters after each other will create a blank line:<br><br><br>
                <h3><font color=#20a142>Example</font></h3><br>
                #include &lt;iostream&gt;  <br>
                using namespace std; <br><br>
                <font color=#1d70cf>int  </font>main() { <br>
                "\t""\t""\t"cout << <font color=#ff0f0f> \"Hello World! \\n\\n\";  </font> <br>
                "\t""\t""\t"cout << <font color=#ff0f0f> \"I am learning C++\";  </font> <br>
                "\t""\t""\t"<font color=#1d70cf>return  </font><font color=#ff0f0f>0;</font><br>
                 }
                ]]>
    </string>
    <string name="output_new_line1">
           <![CDATA[
                <font color=#1d70cf>Output:</font><br>
                "\t""\t""\t"<font color=#ff0f0f><b>Hello World!</b></font><br><br>
                "\t""\t""\t"<font color=#ff0f0f><b>I am learning C++</b></font>
                ]]>
    </string>
    <string name="note_ex__content">
        <![CDATA[Another way to insert a new line, is with the <font color=#ff0f0f>endl</font> manipulator:<br><br><br>
                <h3><font color=#20a142>Example</font></h3><br>
                #include &lt;iostream&gt;  <br>
                using namespace std; <br><br>
                <font color=#1d70cf>int  </font>main() { <br>
                "\t""\t""\t"cout << <font color=#ff0f0f> \"Hello World!\" &lt;&lt; endl;</font> <br>
                "\t""\t""\t"cout << <font color=#ff0f0f> \"I am learning C++\";  </font> <br>
                "\t""\t""\t"<font color=#1d70cf>return  </font><font color=#ff0f0f>0;</font><br>
                 }
                ]]>
    </string>

    <string name="output_new_line2">
         <![CDATA[
                <font color=#1d70cf>Output:</font><br>
                "\t""\t""\t"<font color=#ff0f0f><b>Hello World!</b></font><br>
                "\t""\t""\t"<font color=#ff0f0f><b>I am learning C++</b></font>
                ]]>
    </string>
    <string name="reminder_content">
        <![CDATA[Both <font color=#ff0f0f>\\n</font> and <font color=#ff0f0f>endl</font> are used to break lines. However, <font color=#ff0f0f>\\n</font> is used more often and is the preferred way.<br><br>]]>
    </string>


    //string for c++ comment
    <string name="comment_content">
        <![CDATA[Comments can be used to explain C++ code, and to make it more readable. It can also be used to prevent execution when testing alternative code. Comments can be singled-lined or multi-lined.<br><br>]]>
    </string>
    <string name="single_line_comment">
        <![CDATA[Single-line comments start with two forward slashes (<font color=#ff0f0f>//</font>).<br><br>
                Any text between <font color=#ff0f0f>//</font> and the end of the line is ignored by the compiler (will not be executed).<br><br><br>
                This example uses a single-line comment before a line of code:<br><br>
                <h3><font color=#20a142>Example</font></h3><br>
                #include &lt;iostream&gt;  <br>
                using namespace std; <br><br>
                <font color=#1d70cf>int  </font>main() { <br>
                "\t""\t""\t"<font color=#20a142>// This is a comment</font><br>
                "\t""\t""\t"cout << <font color=#ff0f0f> \"Hello World!\";  </font> <br>
                "\t""\t""\t"<font color=#1d70cf>return  </font><font color=#ff0f0f>0;</font><br>
                 }
             ]]>
    </string>
    <string name="output_single_comment">
        <![CDATA[
                <font color=#1d70cf>Output:</font><br>
                "\t""\t""\t"<font color=#ff0f0f><b>Hello World!</b></font>
                ]]>
    </string>
    <string name="single_line_end_comment">
        <![CDATA[This example uses a single-line comment at the end of a line of code:<br><br>
                <h3><font color=#20a142>Example</font></h3><br>
                #include &lt;iostream&gt;  <br>
                using namespace std; <br><br>
                <font color=#1d70cf>int  </font>main() { <br>
                "\t""\t""\t"cout << <font color=#ff0f0f> \"Hello World!\";</font> <font color=#20a142>// This is a comment</font><br>
                "\t""\t""\t"<font color=#1d70cf>return  </font><font color=#ff0f0f>0;</font><br>
                 }
             ]]>
    </string>
    <string name="output_single_line_end">
         <![CDATA[
                <font color=#1d70cf>Output:</font><br>
                "\t""\t""\t"<font color=#ff0f0f><b>Hello World!</b></font>
                ]]>
    </string>
    <string name="multi_line_comment">
        <![CDATA[Multi-line comments start with <font color=#ff0f0f>/*</font> and ends with <font color=#ff0f0f>*/</font>.<br><br>
                Any text between <font color=#ff0f0f>/*</font> and <font color=#ff0f0f>*/</font> will be ignored by the compiler:<br><br><br>
                <h3><font color=#20a142>Example</font></h3><br>
                #include &lt;iostream&gt;  <br>
                using namespace std; <br><br>
                <font color=#1d70cf>int  </font>main() { <br>
                "\t""\t""\t"<font color=#20a142>/* The code below will print the words Hello World! to the screen, and it is amazing */</font><br></font>
                "\t""\t""\t"cout << <font color=#ff0f0f> \"Hello World!\"; </font> <br>
                "\t""\t""\t"<font color=#1d70cf>return  </font><font color=#ff0f0f>0;</font><br>
                 }
             ]]>
    </string>
    <string name="output_multi_comment">
        <![CDATA[
                <font color=#1d70cf>Output:</font><br>
                "\t""\t""\t"<font color=#ff0f0f><b>Hello World!</b></font>
                ]]>
    </string>
    <string name="say">
        <![CDATA[
                <b>Single or multi-line comments?</b><br><br>
                It is up to you which you want to use. Normally, we use <font color=#ff0f0f>//</font> for short comments, and <font color=#ff0f0f>/*&nbsp;&nbsp;*/</font> for longer.<br><br>
                ]]>
    </string>


    //string for c++ variables
    <string name="variable_content">
         <![CDATA[Variables are containers for storing data values.<br><br>
                 In C++, there are different <b>types</b> of variables (defined with different keywords), for example:<br><br>
                 • <font color=#ff0f0f> int</font> - stores integers (whole numbers), without decimals, such as 123 or -123.<br>
                 • <font color=#ff0f0f> double</font> - stores floating point numbers, with decimals, such as 19.99 or -19.99.<br>
                 • <font color=#ff0f0f> char</font> - stores single characters, such as &#39;a&#39; or &#39;B&#39;. Char values are surrounded by single quotes.<br>
                 • <font color=#ff0f0f> string</font> - stores text, such as \"Hello World\". String values are surrounded by double quotes.<br>
                 • <font color=#ff0f0f> bool</font> - stores values with two states: true or false.<br>
                 ]]>
    </string>
    <string name="syntax_var1">
        <![CDATA[To create a variable, you must specify the type and assign it a value:<br><br>
                 <h3><font color=#20a142><b>Syntax</b></font></h3><br>
                 <i>type variable = value;</i><br><br>
                 Where type is one of C++ types (such as <font color=#ff0f0f> int</font>) and variable is the name of the variable (such as <b>x</b> or <b>myName</b>). The <b>equal sign</b> is used to assign values to the variable.<br><br>
                 To create a variable that should store a number, look at the following example:<br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3><br>
                 Create a variable called <b>myNum</b> of type <font color=#ff0f0f> int</font> and assign it the value <b>15</b>:<br><br>
                 #include &lt;iostream&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t""\t"int myNum = <font color=#ff0f0f>15</font>;<br>
                 "\t""\t""\t"cout << myNum; <br>
                 "\t""\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output_syntax_var">
         <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>15</b></font><br>
                 ]]>
    </string>
    <string name="syntax_var2">
        <![CDATA[You can also declare a variable without assigning the value, and assign the value later:<br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3><br>
                 Create a variable called <b>myNum</b> of type <font color=#ff0f0f> int</font> and assign it the value <b>15</b>:<br><br>
                 #include &lt;iostream&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t""\t"int myNum;<br>
                 "\t""\t""\t"myNum = <font color=#ff0f0f>15</font>;<br>
                 "\t""\t""\t"cout << myNum; <br>
                 "\t""\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output_syntax_var2">
           <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>15</b></font><br>
                 ]]>
    </string>
    <string name="syntax_var3">
           <![CDATA[Note that if you assign a new value to an existing variable, it will overwrite the previous value:<br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t""\t"int myNum = <font color=#ff0f0f>15</font>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color=#20a142>// Now myNum is 15</font><br>
                 "\t""\t""\t"myNum = <font color=#ff0f0f>10</font>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=#20a142>// Now myNum is 10</font><br>
                 "\t""\t""\t"cout << myNum; <br>
                 "\t""\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output_syntax_var3">
        <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>10</b></font><br>
                 ]]>
    </string>
    <string name="data_types">
        <![CDATA[<br><h3><font color=#20a142>Other Types</font></h3>
                 A demonstration of other data types: <br>
                 <h3><font color=#20a142><b>Example</b></font></h3><br>
                 <font color=#1d70cf>int</font>&nbsp;&nbsp;myNum = <font color=#ff0f0f>5</font>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=#20a142>// Integer (whole number without decimals)</font><br>
                 <font color=#1d70cf>double</font>&nbsp;&nbsp;myFloatNum = <font color=#ff0f0f>5.99</font>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=#20a142>// Floating point number (with decimals)</font><br>
                 <font color=#1d70cf>char</font>&nbsp;&nbsp;myLetter = <font color=#ff0f0f>&#39;D&#39;</font>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=#20a142>// Character</font><br>
                 string myText = &nbsp;&nbsp; <font color=#ff0f0f>\"Hello\"</font>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=#20a142>// String (text)</font><br>
                 bool myBoolean = &nbsp;&nbsp; <font color=#1d70cf>true</font>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=#20a142>// Boolean (true or false)</font><br><br><br>
                 You will learn more about the individual types in the Data Types chapter.<br>
                 ]]>
    </string>
    <string name="display_var">
         <![CDATA[<h3><font color=#ff0f0f>Display Variables</font></h3>
                 The <font color=#ff0f0f>cout </font> object is used together with the <font color=#ff0f0f> << </font> operator to display variables.<br>
                 To combine both text and a variable, separate them with the <font color=#ff0f0f> << </font> operator: <br>
                 <h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t""\t"int myAge = <font color=#ff0f0f>35</font> ;<br>
                 "\t""\t""\t"cout << <font color=#ff0f0f>\"I am\"</font>&nbsp;<< myAge << <font color=#ff0f0f>\"years old.\"</font>; <br>
                 "\t""\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output_display_var">
         <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t"<font color=#ff0f0f><b>I am 35 years old.</b></font><br>
                 ]]>
    </string>
    <string name="adding_var">
         <![CDATA[<h3><font color=#ff0f0f>Add Variables Together</font></h3>
                 To add a variable to another variable, you can use the <font color=#ff0f0f>+</font>  operator:<br>
                 <h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t""\t"int x = <font color=#ff0f0f>5</font> ;<br>
                 "\t""\t""\t"int y = <font color=#ff0f0f>6</font> ;<br>
                 "\t""\t""\t"int sum = x&nbsp;+&nbsp;y ;<br>
                 "\t""\t""\t"cout << sum; <br>
                 "\t""\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output_add_var">
         <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>11</b></font><br>
                 ]]>
    </string>
    <string name="declare_multivar">
         <![CDATA[<h3><font color=#ff0f0f>Declare Many Variables</font></h3>
                 To declare more than one variable of the <b>same type</b>, use a comma-separated list:<br>
                 <h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t""\t"int x = <font color=#ff0f0f>10</font>, int y = <font color=#ff0f0f>15</font>, int x = <font color=#ff0f0f>45</font>;<br>
                 "\t""\t""\t"cout << x + y + z; <br>
                 "\t""\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output_multi_var">
          <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>70</b></font><br>
                 ]]>
    </string>
    <string name="identified_var">
        <![CDATA[All C++ <b>variables</b> must be <b>identified</b> with <b>unique names</b>.<br><br>
                 These unique names are called <b>identifiers</b>.<br><br>
                 Identifiers can be short names (like x and y) or more descriptive names (age, sum, totalVolume).<br><br>
                 <b>Note:</b> It is recommended to use descriptive names in order to create understandable and maintainable code:<br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t""\t"<font color=#20a142>// Good name</font><br>
                 "\t""\t""\t"int minutesPerHour = <font color=#ff0f0f>60</font>;<br><br>
                  "\t""\t""\t"<font color=#20a142>// OK, but not so easy to understand what m actually is</font><br>
                 "\t""\t""\t"int m = <font color=#ff0f0f>60</font>;<br><br>
                 "\t""\t""\t"cout << minutesPerHour << <font color=#ff0f0f>\"\\n\"</font>; <br>
                 "\t""\t""\t"cout << m;
                 "\t""\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output_identifiers">
        <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>60</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>60</b></font>
                 ]]>
    </string>
    <string name="identifiers_rule">
         <![CDATA[<br>The general rules for constructing names for variables (unique identifiers) are:<br><br>
                 • Names can contain letters, digits and underscores.<br>
                 • Names must begin with a letter or an underscore (_).<br>
                 • Names are case sensitive (<font color=#ff0f0f> myVar</font> and <font color=#ff0f0f> myvar</font> are different variables).<br>
                 • Names cannot contain whitespaces or special characters like !, #, %, etc.<br>
                 • Reserved words (like C++ keywords, such as <font color=#ff0f0f> int</font> ) cannot be used as names.<br>
                 ]]>
    </string>
    <string name="content_constants">
        <![CDATA[<h3><font color=#ff0f0f>Constants</font></h3>
                 When you do not want others (or yourself) to override existing variable values, use the <font color=#ff0f0f> const </font> keyword (this will declare the variable as \"constant\", which means <b>unchangeable and read-only</b>):<br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t""\t"<font color=#ff0f0f>const</font> int myNum = <font color=#ff0f0f>15</font>;<br>
                 "\t""\t""\t"myNum = <font color=#ff0f0f>10</font>;<br>
                 "\t""\t""\t"cout << myNum; <br>
                 "\t""\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="constant_error">
        <![CDATA[
                 <font color=#1d70cf>Output:</font><font color=#ff0f0f>Error</font><br>
                 <font color=#ff0f0f><b>In function &#39;int main()&#39;:</b></font><br>
                 <font color=#ff0f0f><b>6.9: error: assignment of read-only variable &#39;myNum&#39;</b></font>
                 ]]>
    </string>
    <string name="content1_constants">
        <![CDATA[<br><br>You should always declare the variable as constant when you have values that are unlikely to change:<br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t""\t"<font color=#ff0f0f>const</font> int minutesPerHour = <font color=#ff0f0f>60</font>;<br>
                 "\t""\t""\t"<font color=#ff0f0f>const</font> float PI = <font color=#ff0f0f>3.14</font>;<br>
                 "\t""\t""\t"cout << minutesPerHour << <font color=#ff0f0f> \"\\n\"</font>; <br>
                 "\t""\t""\t"cout << PI; <br>
                 "\t""\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output_constants">
        <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>60</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>3.14</b></font>
                 ]]>
    </string>


    //string for c++ user input
    <string name="content_user_input">
          <![CDATA[You have already learned that <font color=#ff0f0f>cout</font> is used to output (print) values. Now we will use <font color=#ff0f0f>cin</font> to get user input.<br><br>
                  <font color=#ff0f0f>cin</font> is a predefined variable that reads data from the keyboard with the extraction operator (<font color=#ff0f0f> >> </font>).<br><br>
                  In the following example, the user can input a number, which is stored in the variable <font color=#ff0f0f>x</font>. Then we print the value of <font color=#ff0f0f>x</font>.<br><br><br>
                  <h3><font color=#20a142><b>Example</b></font></h3><br>
                  #include &lt;iostream&gt;  <br>
                  using namespace std; <br><br>
                  <font color=#1d70cf>int</font> main() { <br>
                  "\t""\t""\t"<font color=#1d70cf>int</font> <font color=#ff0f0f>x</font>;<br>
                  "\t""\t""\t"cout << <font color=#ff0f0f>\"Type a number:&nbsp;\"</font>;&nbsp;&nbsp;<font color=#20a142>// Type a number and press enter</font> <br>
                  "\t""\t""\t"cin >>&nbsp;<font color=#ff0f0f>x</font>;&nbsp;&nbsp;<font color=#20a142>// Get user input from the keyboard</font> <br>
                  "\t""\t""\t"cout << <font color=#ff0f0f>\"Your number is:&nbsp;\"</font> << <font color=#ff0f0f>&nbsp;x</font>; <br>
                  "\t""\t""\t"<font color=#1d70cf>return</font> <font color=#ff0f0f>0</font>;<br>
                 }
                 ]]>
    </string>
    <string name="to_know">
          <![CDATA[<h3><i>Good To Know</i></b></h3>
                 <font color=#ff0f0f>cout</font> is pronounced \"see-out\".Used for <b>output</b>, and uses the insertion operator (<font color=#ff0f0f> << </font>)<br><br>
                 <font color=#ff0f0f>cin</font> is pronounced \"see-in\".Used for <b>input</b>, and uses the extraction operator (<font color=#ff0f0f> >> </font>)<br>
                 ]]>
    </string>
    <string name="calculate_sum">
    <![CDATA[In this example, the user must input two numbers. Then we print the sum by calculating (adding) the two numbers:<br><br><br>
                  <h3><font color=#20a142><b>Example</b></font></h3><br>
                  #include &lt;iostream&gt;  <br>
                  using namespace std; <br><br>
                  <font color=#1d70cf>int</font> main() { <br>
                  "\t""\t""\t"<font color=#1d70cf>int</font> <font color=#ff0f0f>x,&nbsp;y</font>;<br>
                  "\t""\t""\t"<font color=#1d70cf>int</font> <font color=#ff0f0f>sum</font>;<br>
                  "\t""\t""\t"cout << <font color=#ff0f0f>\"Type a number:&nbsp;\"</font>;<br>
                  "\t""\t""\t"cin >>&nbsp;<font color=#ff0f0f>x</font>;<br>
                  "\t""\t""\t"cout << <font color=#ff0f0f>\"Type another number:&nbsp;\"</font>;<br>
                  "\t""\t""\t"cin >>&nbsp;<font color=#ff0f0f>y</font>;<br>
                  "\t""\t""\t"sum = <font color=#ff0f0f>x</font>&nbsp;+<font color=#ff0f0f> y</font>;<br>
                  "\t""\t""\t"cout << <font color=#ff0f0f>\"Sum is:&nbsp;\"</font> << sum;<br>
                  "\t""\t""\t"<font color=#1d70cf>return</font> <font color=#ff0f0f>0</font>;<br>
                 }
                 ]]>
    </string>


    //string c++ data types
    <string name="data_types_content">
        <![CDATA[As explained in the  <font color=#1d70cf><b><u>Variables</u></b></font> chapter, a variable in C++ must be a specified data type:<br><br>
                  <h3><font color=#20a142><b>Example</b></font></h3><br>
                  #include &lt;iostream&gt;  <br>
                  #include &lt;string&gt;  <br>
                  <font color=#1d70cf>using namespace</font> std; <br><br>
                  <font color=#1d70cf>int</font> main() { <br>
                  "\t""\t""\t"<font color=#20a142>// Creating variables</font> <br>
                  "\t""\t""\t"int myNum =&nbsp;<font color=#ff0f0f>5</font>;"\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t"<font color=#20a142>// Integer (whole number)</font> <br>
                  "\t""\t""\t"float myFloatNum =&nbsp;<font color=#ff0f0f>5.99</font>;"\t""\t""\t""\t""\t""\t""\t""\t"<font color=#20a142>// Floating point number</font> <br>
                  "\t""\t""\t"double myDoubleNum =&nbsp;<font color=#ff0f0f>9.98</font>;"\t""\t""\t""\t"<font color=#20a142>// Floating point number</font> <br>
                  "\t""\t""\t"char myLetter =&nbsp;<font color=#ff0f0f>&#39;D&#39;</font>;"\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t"<font color=#20a142>// Character</font> <br>
                  "\t""\t""\t"bool myBoolean =&nbsp;<font color=#ff0f0f>true</font>;"\t""\t""\t""\t""\t""\t""\t""\t""\t""\t"<font color=#20a142>// Boolean</font> <br>
                  "\t""\t""\t"string myString =&nbsp;<font color=#ff0f0f>\"Hello\"</font>;"\t""\t""\t""\t""\t""\t""\t"<font color=#20a142>// String</font> <br><br>
                  "\t""\t""\t"<font color=#20a142>// Print variable values</font> <br>
                  "\t""\t""\t"cout << <font color=#ff0f0f>\"int:&nbsp\"</font> << myNum  << <font color=#ff0f0f>\"\\n\"</font>;<br>
                  "\t""\t""\t"cout << <font color=#ff0f0f>\"float:&nbsp\"</font> << myFloatNum  << <font color=#ff0f0f>\"\\n\"</font>;<br>
                  "\t""\t""\t"cout << <font color=#ff0f0f>\"double:&nbsp\"</font> << myDoubleNum  << <font color=#ff0f0f>\"\\n\"</font>;<br>
                  "\t""\t""\t"cout << <font color=#ff0f0f>\"char:&nbsp\"</font> << myLetter  << <font color=#ff0f0f>\"\\n\"</font>;<br>
                  "\t""\t""\t"cout << <font color=#ff0f0f>\"bool:&nbsp\"</font> << myBoolean  << <font color=#ff0f0f>\"\\n\"</font>;<br>
                  "\t""\t""\t"cout << <font color=#ff0f0f>\"string:&nbsp\"</font> << myString  << <font color=#ff0f0f>\"\\n\"</font>;<br>
                  "\t""\t""\t"<font color=#1d70cf>return</font> <font color=#ff0f0f>0</font>;<br>
                 }
                 ]]>
    </string>
    <string name="data_types_output">
        <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>int: 5</b></font><br>
                 "\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>float: 5.99</b></font><br>
                 "\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>double: 9.98</b></font><br>
                 "\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>char: D</b></font><br>
                 "\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>bool: 1</b></font><br>
                 "\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>string: Hello</b></font><br>
                 ]]>
    </string>
    <string name="numeric_int">
        <![CDATA[<h3>Numeric Types</h3>
                  Use <font color=#ff0f0f>int</font> when you need to store a whole number without decimals, like 35 or 1000, and <font color=#ff0f0f>float</font> or <font color=#ff0f0f>double</font>
                  when you need a floating point number (with decimals), like 9.99 or 3.14515.<br><br><br><br>
                  <font color=#20a142><b>int</b></font><br><br>
                  #include &lt;iostream&gt;  <br>
                  <font color=#1d70cf>using namespace</font> std; <br><br>
                  int main() { <br>
                  "\t""\t""\t"int myNum =&nbsp;<font color=#ff0f0f>1000</font>;<br>
                  "\t""\t""\t"cout << myNum; <br>
                  "\t""\t""\t"<font color=#1d70cf>return 0</font>;<br>
                 }
                 ]]>
    </string>
    <string name="int_output">
         <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>1000</b></font>
                 ]]>
    </string>
    <string name="numeric_float">
        <![CDATA[<font color=#20a142><b>float</b></font><br><br>
                 #include &lt;iostream&gt;  <br>
                 <font color=#1d70cf>using namespace</font> std; <br><br>
                 int main() { <br>
                 "\t""\t""\t"float myNum =&nbsp;<font color=#ff0f0f>5.75</font>;<br>
                 "\t""\t""\t"cout << myNum; <br>
                 "\t""\t""\t"<font color=#1d70cf>return 0</font>;<br>
                 }
                ]]>
    </string>
    <string name="float_output">
         <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>5.75</b></font>
                 ]]>
    </string>
    <string name="numeric_double">
        <![CDATA[<font color=#20a142><b>double</b></font><br><br>
                 #include &lt;iostream&gt;  <br>
                 <font color=#1d70cf>using namespace</font> std; <br><br>
                 int main() { <br>
                 "\t""\t""\t"double myNum =&nbsp;<font color=#ff0f0f>19.99</font>;<br>
                 "\t""\t""\t"cout << myNum; <br>
                 "\t""\t""\t"<font color=#1d70cf>return 0</font>;<br>
                 }
                ]]>
    </string>
    <string name="double_output">
         <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>19.99</b></font>
                 ]]>
    </string>
    <string name="floatvsdouble">
        <![CDATA[<font color=#ff0f0f>float</font> VS. <font color=#ff0f0f>double</font> <br><br>
                  The <b>precision</b> of a floating point value indicates how many digits the value can have after the decimal point. The precision of <font color=#ff0f0f>float</font> is only six or seven decimal digits, while
                  <font color=#ff0f0f>double</font> variables have a precision of about 15 digits. Therefore it is safer to use <font color=#ff0f0f>double</font> for most calculations.<br>
                 ]]>
    </string>
    <string name="scientific_number">
        <![CDATA[<h3><font color=#ff0f0f>Scientific Numbers</font></h3>
                  A floating point number can also be a scientific number with an \"e\" to indicate the power of 10:<br><br>
                  <h3><font color=#20a142>Example</font></h3><br>
                  #include &lt;iostream&gt;  <br>
                  <font color=#1d70cf>using namespace</font> std; <br><br>
                  int main() { <br>
                  "\t""\t""\t"float f1 =&nbsp;&nbsp;<font color=#ff0f0f>35e3</font>;<br>
                  "\t""\t""\t"double d1 =&nbsp;&nbsp;<font color=#ff0f0f>12E4</font>;<br>
                  "\t""\t""\t"cout << f1 << <font color=#ff0f0f>\"\\n\"</font>; <br>
                  "\t""\t""\t"cout << d1; <br>
                  "\t""\t""\t"<font color=#1d70cf>return 0</font>;<br>
                 }
                 ]]>
    </string>
    <string name="scientific_output">
          <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>35000</b></font><br>
                 "\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>120000</b></font>
                 ]]>
    </string>
    <string name="booleans_content">
         <![CDATA[A boolean data type is declared with the  <font color=#ff0f0f>bool</font> keyword and can only take the values <font color=#ff0f0f>true</font> or <font color=#ff0f0f>false</font>.
                  When the value is returned, <font color=#ff0f0f>true</font> = <font color=#ff0f0f>1</font> and <font color=#ff0f0f>false</font> = <font color=#ff0f0f>0</font>. <br><br><br>
                  <h3><font color=#20a142>Example</font></h3><br>
                  #include &lt;iostream&gt;  <br>
                  <font color=#1d70cf>using namespace</font> std; <br><br>
                  int main() { <br>
                  "\t""\t""\t"bool isCodingFun =&nbsp;<font color=#ff0f0f>true</font>;<br>
                  "\t""\t""\t"bool isFishTasty =&nbsp;<font color=#ff0f0f>false</font>;<br>
                  "\t""\t""\t"cout << isCodingFun << <font color=#ff0f0f>\"\\n\"</font>;"\t""\t""\t""\t""\t"<font color=#20a142>// Outputs 1 (true)</font> <br>
                  "\t""\t""\t"cout << isFishTasty;"\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t"<font color=#20a142>// Outputs 0 (false)</font><br>
                  "\t""\t""\t"<font color=#1d70cf>return 0</font>;<br>
                 }
                 ]]>
    </string>
    <string name="booleans_output">
        <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>1</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>0</b></font>
                 ]]>
    </string>
    <string name="character">
        <![CDATA[The <font color=#ff0f0f>char</font> data type is used to store a <b>single</b> character. The character must be surrounded by single quotes, like &#39;A&#39; or &#39;c&#39;: <br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t""\t"char myGrade =&nbsp;<font color=#ff0f0f>&#39;B&#39;</font>; <br>
                 "\t""\t""\t"cout << myGrade; <br>
                 "\t""\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="char_output">
         <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>B</b></font><br>
                 ]]>
    </string>
    <string name="character1">
         <![CDATA[Alternatively, you can use ASCII values to display certain characters: <br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t""\t"char a =&nbsp;<font color=#ff0f0f>65</font>, b =&nbsp;<font color=#ff0f0f>66</font>, c =&nbsp;<font color=#ff0f0f>67</font>;<br>
                 "\t""\t""\t"cout << a; <br>
                 "\t""\t""\t"cout << b; <br>
                 "\t""\t""\t"cout << c; <br>
                 "\t""\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="char1_output">
        <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>ABC</b></font>
                 ]]>
    </string>
    <string name="string_content">
        <![CDATA[The <font color=#ff0f0f>string</font> type is used to store a sequence of characters (text). This is not a built-in type, but it behaves like one in its most basic usage. String values must be surrounded by double quotes: <br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3><br>
                 string greeting = <font color=#ff0f0f>\"Hello\"</font>;<br>
                 cout << greeting;<br><br><br>
                 To use strings, you must include an additional header file in the source code, the <font color=#ff0f0f>string</font> library.<br>
                 ]]>

    </string>
    <string name="string_ex">
      <![CDATA[<h3><font color=#20a142><b>Example</b></font></h3><br>
               #include &lt;iostream&gt;  <br>
               <font color=#20a142>// Include the string library </font><br>
               #include &lt;string&gt;  <br>
               <font color=#1d70cf>using namespace </font> std; <br><br>
               int main() { <br>
               "\t""\t""\t"<font color=#20a142>// Create a string variable </font><br>
               "\t""\t""\t"string greeting = <font color=#ff0f0f>\"Hello\"</font>; <br>
                "\t""\t""\t"<font color=#20a142>// Output string value </font><br>
               "\t""\t""\t" cout << greeting;<br>
               "\t""\t""\t"<font color=#1d70cf>return 0;</font><br>
                }
               ]]>
    </string>
    <string name="string_output">
         <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>Hello</b></font><br>
                 ]]>
    </string>


    // string c++ operators
    <string name="operators_content">
        <![CDATA[Operators are used to perform operations on variables and values.<br>
                 In the example below, we use the <font color=#ff0f0f>+</font> <b>operator</b> to add together the two values:<br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t""\t"int x =&nbsp;<font color=#ff0f0f>100</font> + <font color=#ff0f0f>&nbsp;50</font>; <br>
                 "\t""\t""\t"cout << x; <br>
                 "\t""\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output_operators">
        <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>150</b></font>
                 ]]>
    </string>
    <string name="operators1_content">
        <![CDATA[Although the <font color=#ff0f0f>+</font> operator is often used to add together two values, like in the example above, it can also be used to add together a variable and a value, or a variable and another variable:<br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t""\t"int sum1 =&nbsp;<font color=#ff0f0f>100</font> + <font color=#ff0f0f>&nbsp;50</font>;"\t""\t""\t""\t""\t""\t""\t""\t"<font color=#20a142>// 150 (100 + 50)</font> <br>
                 "\t""\t""\t"int sum2 =&nbsp;sum1 + <font color=#ff0f0f>&nbsp;250</font>;"\t""\t""\t""\t""\t"<font color=#20a142>// 400 (150 + 250)</font> <br>
                 "\t""\t""\t"int sum3 =&nbsp;sum2 + &nbsp;sum2;"\t""\t""\t"<font color=#20a142>// 800 (400 + 400)</font> <br>
                 "\t""\t""\t"cout << sum1 << <font color=#ff0f0f>&nbsp;\"\\n\"</font>; <br>
                 "\t""\t""\t"cout << sum2 << <font color=#ff0f0f>&nbsp;\"\\n\"</font>; <br>
                 "\t""\t""\t"cout << sum3; <br>
                 "\t""\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output1_operators">
         <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>150</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>400</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>800</b></font>
                 ]]>
    </string>
    <string name="four_topic">
         <![CDATA[<br>C++ divides the operators into the following groups:<br><br>
                 • <font color=#1d70cf><u>Arithmetic operators</u></font> <br>
                 • <font color=#1d70cf><u>Assignment operators</u></font> <br>
                 • <font color=#1d70cf><u>Comparison operators</u></font><br>
                 • <font color=#1d70cf><u>Logical operators</u></font><br>
                 ]]>
    </string>
    <string name="assign_content">
         <![CDATA[<h3><font color=#ff0f0f>Assignment Operators</font></h3>
                 Assignment operators are used to assign values to variables.<br><br>
                 In the example below, we use the <b>assignment</b> operator (<font color=#ff0f0f>=</font>)to assign the value <b>10</b> to a variable called <b>x</b>:<br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t""\t"int x =&nbsp;<font color=#ff0f0f>10</font>; <br>
                 "\t""\t""\t"cout << x; <br>
                 "\t""\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output_assign">
        <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>10</b></font>
                 ]]>
    </string>
    <string name="assign1_content">
         <![CDATA[The <b>addition assignment</b> operator (<font color=#ff0f0f>+=</font>) adds a value to a variable:<b>x</b>:<br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t""\t"int x =&nbsp;<font color=#ff0f0f>10</font>; <br>
                 "\t""\t""\t"x +=&nbsp<font color=#ff0f0f>5</font>;<br>
                 "\t""\t""\t"cout << x; <br>
                 "\t""\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output1_assign">
         <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>15</b></font>
                 ]]>
    </string>
    <string name="comparison_content">
         <![CDATA[<h3><font color=#ff0f0f>Comparison Operators</font></h3>
                 Comparison operators are used to compare two values.<br><br>
                 <b>Note:</b> The return value of a comparison is either true (<font color=#ff0f0f>1</font>) or false (<font color=#ff0f0f>0</font>).<br><br>
                 In the following example, we use the <b>greater than</b> operator (<font color=#ff0f0f> > </font>) to find out if 5 is greater than 3:<br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t""\t"int x =&nbsp;<font color=#ff0f0f>5</font>; <br>
                 "\t""\t""\t"int y =&nbsp;<font color=#ff0f0f>3</font>; <br>
                 "\t""\t""\t"cout << (x > y);"\t""\t""\t"<font color=#20a142>// returns 1 (true) because 5 is greater than 3 </font><br>
                 "\t""\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output_comparison">
              <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>1</b></font>
                 ]]>
    </string>
    <string name="logical_content">
         <![CDATA[<h3><font color=#ff0f0f>Logical Operators</font></h3>
                 Logical operators are used to determine the logic between variables or values:<br><br>
                 ]]>
    </string>


    // string for c++ string
    <string name="concatenation_content">
         <![CDATA[The <font color=#ff0f0f>+</font> operator can be used between strings to add them together to make a new string. This is called <b>concatenation</b>:<br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 #include &lt;string&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t""\t"string firstName =&nbsp;<font color=#ff0f0f>\"John\"</font>; <br>
                 "\t""\t""\t"string lastName =&nbsp;<font color=#ff0f0f>\"Woe\"</font>; <br>
                 "\t""\t""\t"string fullName =&nbsp;firstName&nbsp;+&nbsp;lastName; <br>
                 "\t""\t""\t"cout << fullName;<br>
                 "\t""\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output_concatenation">
         <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>John Woe</b></font>
                 ]]>
    </string>
    <string name="concatenation1">
        <![CDATA[In the example above, we added a space after firstName to create a space between John and Doe on output. However, you could also add a space with quotes (<font color=#ff0f0f>\" \"</font> or <font color=#ff0f0f>&#39;&nbsp;&#39;</font>): <br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 #include &lt;string&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t""\t"string firstName =&nbsp;<font color=#ff0f0f>\"John\"</font>; <br>
                 "\t""\t""\t"string lastName =&nbsp;<font color=#ff0f0f>\"Woe\"</font>; <br>
                 "\t""\t""\t"string fullName =&nbsp;firstName&nbsp;+&nbsp;<font color=#ff0f0f>\" \"</font>+&nbsp;lastName; <br>
                 "\t""\t""\t"cout << fullName;<br>
                 "\t""\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output1_concatenation">
         <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>John Woe</b></font>
                 ]]>
    </string>
    <string name="append">
        <![CDATA[<h3><font color=#ff0f0f><b>Append</b></font></h3>
                 A string in C++ is actually an object, which contain functions that can perform certain operations on strings. For example, you can also concatenate strings with the <font color=#ff0f0f>append()</font> function:<br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 #include &lt;string&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t""\t"string firstName =&nbsp;<font color=#ff0f0f>\"John\"</font>; <br>
                 "\t""\t""\t"string lastName =&nbsp;<font color=#ff0f0f>\"Woe\"</font>; <br>
                 "\t""\t""\t"string fullName =&nbsp;firstName.append(lastName); <br>
                 "\t""\t""\t"cout << fullName;<br>
                 "\t""\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output_append">
        <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>John Woe</b></font>
                 ]]>
    </string>
    <string name="plus_append">
         <![CDATA[It is up to you whether you want to use <font color=#ff0f0f>+</font> or <font color=#ff0f0f>append()</font>.The major difference between the two, is that the <font color=#ff0f0f>append()</font>
                  function is much faster. However, for testing and such, it might be easier to just use <font color=#ff0f0f>+</font>.<br>
                 ]]>
    </string>
    <string name="warning">
         <![CDATA[WARNING!<br><br>
                  C++ uses the <font color=#ff0f0f>+</font> operator for both <b>addition</b> and <b>concatenation</b>.<br><br>
                  Numbers are added. Strings are concatenated.<br>
                 ]]>
    </string>
    <string name="number_string">
          <![CDATA[If you add two numbers, the result will be a number:<br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t""\t"int x =&nbsp;<font color=#ff0f0f>10</font>; <br>
                 "\t""\t""\t"int y =&nbsp;<font color=#ff0f0f>20</font>; <br>
                 "\t""\t""\t"int z =&nbsp;x + y; "\t""\t""\t"<font color=#20a142>// z will be 30 (an integer)</font> <br>
                 "\t""\t""\t"cout << z;<br>
                 "\t""\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output_string">
          <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>30</b></font>
                 ]]>
    </string>
    <string name="number1_strings">
        <![CDATA[If you add two strings, the result will be a string concatenation:<br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 #include &lt;string&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t""\t"string x =&nbsp;<font color=#ff0f0f>\"10\"</font>; <br>
                 "\t""\t""\t"string y =&nbsp;<font color=#ff0f0f>\"20\"</font>; <br>
                 "\t""\t""\t"string z =&nbsp;x + y; "\t""\t""\t"<font color=#20a142>// z will be 1020 (a string)</font> <br>
                 "\t""\t""\t"cout << z;<br>
                 "\t""\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output1_string">
         <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>1020</b></font>
                 ]]>
    </string>
    <string name="error">
        <![CDATA[<h3>Example</h3 <br>
                 string x =&nbsp;<font color=#ff0f0f>\"10\"</font>; <br>
                 int y =&nbsp;<font color=#ff0f0f>20</font>;
                 string z =&nbsp;x + y;
                 ]]>
    </string>
    <string name="length_content">
          <![CDATA[To get the length of a string, use the <font color=#ff0f0f>length()</font> function:<br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 #include &lt;string&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t""\t"string text =&nbsp;<font color=#ff0f0f>\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</font>; <br>
                 "\t""\t""\t"cout << &nbsp;<font color=#ff0f0f>\"The length of the txt string is:&nbsp;\"</font> << txt.length();<br>
                 "\t""\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output_length">
         <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t"<font color=#ff0f0f><b>The length of the txt string is:&nbsp;26</b></font>
                 ]]>
    </string>
    <string name="length_tip">
         <![CDATA[<b>Tip:</b> You might see some C++ programs that use the <font color=#ff0f0f>size()</font> function to get the length of a string. This is just an alias of
                 <font color=#ff0f0f>length()</font>.It is completely up to you if you want to use <font color=#ff0f0f>length()</font> or <font color=#ff0f0f>size()</font>:<br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 #include &lt;string&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t""\t"string text =&nbsp;<font color=#ff0f0f>\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</font>; <br>
                 "\t""\t""\t"cout << &nbsp;<font color=#ff0f0f>\"The length of the txt string is:&nbsp;\" </font> << txt.size();<br>
                 "\t""\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output1_length">
        <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t"<font color=#ff0f0f><b>The length of the txt string is:&nbsp;26</b></font>
                 ]]>
    </string>
    <string name="access_content">
         <![CDATA[You can access the characters in a string by referring to its index number inside square brackets <font color=#ff0f0f>[ ]</font>.<br><br>
                 This example prints the <b>first character</b> in <b>myString</b>:<br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 #include &lt;string&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t""\t"string myString =&nbsp;<font color=#ff0f0f>\"Hello\"</font>; <br>
                 "\t""\t""\t"cout << &nbsp myString [<font color=#ff0f0f>0</font>];<br>
                 "\t""\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output_access">
          <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>H</b></font>
                 ]]>
    </string>
    <string name="note">
          <![CDATA[<b>Note:</b> String indexes start with 0: [0] is the first character. [1] is the second character, etc.<br><br>]]>
    </string>
    <string name="access1_content">
          <![CDATA[This example prints the <b>second character</b> in <b>myString</b>:<br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 #include &lt;string&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t""\t"string myString =&nbsp;<font color=#ff0f0f>\"Hello\"</font>; <br>
                 "\t""\t""\t"cout << &nbsp myString [<font color=#ff0f0f>1</font>];<br>
                 "\t""\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output1_access">
           <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>e</b></font>
                 ]]>
    </string>
    <string name="change_string">
         <![CDATA[<font color=#ff0f0f><b>Change String Characters</b></font><br>
                 To change the value of a specific character in a string, refer to the index number, and use single quotes:<br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 #include &lt;string&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t""\t"string myString =&nbsp;<font color=#ff0f0f>\"Hello\"</font>; <br>
                 "\t""\t""\t"myString [<font color=#ff0f0f>0</font>] = &nbsp;<font color=#ff0f0f> &#39;J&#39;</font> ;<br>
                 "\t""\t""\t"cout << myString;
                 "\t""\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="change1_string">
         <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>Jello</b></font>
                 ]]>
    </string>


    //string for c++ boolean
    <string name="bool_content">
        <![CDATA[Very often, in programming, you will need a data type that can only have one of two values, like:<br><br>
                 • YES / NO <br>
                 • ON / OFF <br>
                 • TRUE / FALSE <br><br>
                 For this, C++ has a <font color=#ff0f0f>bool</font> data type, which can take the values <font color=#ff0f0f>true</font> (1) or <font color=#ff0f0f>false</font>(0).<br>
                 ]]>
    </string>
    <string name="boolean_values_content">
         <![CDATA[A boolean variable is declared with the <font color=#ff0f0f>bool</font> keyword and can only take the values <font color=#ff0f0f>true</font> or <font color=#ff0f0f>false</font>.<br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t""\t"bool isCodingFun =&nbsp;<font color=#ff0f0f>true</font>; <br>
                 "\t""\t""\t"bool isFishTasty =&nbsp;<font color=#ff0f0f>false</font>;<br>
                 "\t""\t""\t"cout << isCodingFun << <font color=#ff0f0f>\"\\n\"</font>; "\t""\t""\t"<font color=#20a142>// Outputs 1 (true)</font> <br>
                 "\t""\t""\t"cout << isFishTasty; "\t""\t""\t""\t"<font color=#20a142>// Outputs 0 (false)</font>
                 "\t""\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output_bool_values">
           <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>1</b></font> <br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>0</b></font>
                 ]]>
    </string>
    <string name="boolvalues_explain">
        <![CDATA[From the example above, you can read that a <font color=#ff0f0f>true</font> value returns <font color=#ff0f0f>1</font>, and
                <font color=#ff0f0f>false</font> returns <font color=#ff0f0f>0</font>. <br><br>
                However, it is more common to return boolean values from boolean expressions.
                ]]>
    </string>
    <string name="boolean_express_content">
        <![CDATA[A <b>Boolean expression</b> is a C++ expression that returns a boolean value: <font color=#ff0f0f>1</font> (true) or <font color=#ff0f0f>0</font> (false).<br><br>
                 You can use a comparison operator, such as the <b>greater than</b> (<font color=#ff0f0f> > </font>) operator to find out if an expression (or a variable) is true:<br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t""\t"int x =&nbsp; <font color=#ff0f0f>10</font>; <br>
                 "\t""\t""\t"int y =&nbsp; <font color=#ff0f0f>9</font>;<br>
                 "\t""\t""\t"cout << (x > y); "\t""\t""\t"<font color=#20a142>// returns 1 (true), because 10 is higher than 9</font><br>
                 "\t""\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output_bool_express">
       <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>1</b></font>
                 ]]>
    </string>
    <string name="boolean_example">
        <![CDATA[Or even easier: <br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t""\t"cout << (<font color=#ff0f0f>10</font> > <font color=#ff0f0f>9</font>); "\t""\t""\t"<font color=#20a142>// returns 1 (true), because 10 is higher than 9</font><br>
                 "\t""\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output1_bool_express">
         <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>1</b></font>
                 ]]>
    </string>
    <string name="boolean_example1">
        <![CDATA[In the examples below, we use the <b>equal to</b> (<font color=#ff0f0f> == </font>) operator to evaluate an expression:<br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t""\t"int x =&nbsp; <font color=#ff0f0f>10</font>; <br>
                 "\t""\t""\t"cout << (x == <font color=#ff0f0f>10</font>); "\t""\t""\t"<font color=#20a142>// returns 1 (true), because the value of x is equal to 10</font><br>
                 "\t""\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output2_bool_express">
         <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>1</b></font>
                 ]]>
    </string>
    <string name="boolean_example2">
        <![CDATA[<br><br><h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t""\t"cout << (<font color=#ff0f0f>10</font> == <font color=#ff0f0f>15</font>); "\t""\t""\t"<font color=#20a142>// returns 0 (false), because 10 is not equal to 15 </font><br>
                 "\t""\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output3_bool_express">
          <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>0</b></font>
                 ]]>
    </string>


    // string for conditional statements
    <string name="condition_content">
          <![CDATA[C++ supports the usual logical conditions from mathematics:<br><br>
                 "\t""\t"• Less than:&nbsp; <font color=#ff0f0f> a < b </font> <br>
                 "\t""\t"• Less than or equal to:&nbsp; <font color=#ff0f0f> a &lt;= b </font> <br>
                 "\t""\t"• Greater than:&nbsp; <font color=#ff0f0f> a > b </font> <br>
                 "\t""\t"• Greater than or equal to:&nbsp; <font color=#ff0f0f> a >= b </font> <br>
                 "\t""\t"• Equal to :&nbsp; <font color=#ff0f0f> a == b </font> <br>
                 "\t""\t"• Not Equal to: &nbsp; <font color=#ff0f0f>a != b </font> <br><br>
                 You can use these conditions to perform different actions for different decisions.<br><br>
                 C++ has the following conditional statements:<br><br>
                 "\t""\t"• Use&nbsp;<font color=#ff0f0f>if</font> to specify a block of code to be executed, if a specified condition is true <br>
                 "\t""\t"• Use&nbsp;<font color=#ff0f0f>else</font> to specify a block of code to be executed, if the same condition is false<br>
                 "\t""\t"• Use&nbsp;<font color=#ff0f0f>else if</font> to specify a new condition to test, if the first condition is false <br>
                 "\t""\t"• Use&nbsp;<font color=#ff0f0f>switch</font> to specify many alternative blocks of code to be executed <br><br><br>
                 <h3><font color=#ff0f0f><b>The if Statement</b></font></h3>
                 Use the <font color=#ff0f0f> if </font> statement to specify a block of C++ code to be executed if a condition is <font color=#ff0f0f> true </font>. <br><br>
                 <h3><font color=#000000><b>Syntax</b></font></h3>
                 <font color=#1d70cf>if</font> (condition) { <br>
                 <font color=#20a142>"\t"// block of code to be executed if the condition is true</font><br>
                 }<br>
                 ]]>
    </string>
    <string name="note_condition">
         <![CDATA[Note that <font color=#ff0f0f>if</font> is in lowercase letters. Uppercase letters (If or IF) will generate an error.]]>
    </string>
    <string name="if_example">
          <![CDATA[In the example below, we test two values to find out if 20 is greater than 18. If the condition is <font color=#ff0f0f>true</font>, print some text:<br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t"<font color=#ff0f0f>if</font>&nbsp;(<font color=#ff0f0f>20</font> > <font color=#ff0f0f>18</font>) { <br>
                 "\t""\t""\t""\t"cout << <font color=#ff0f0f> \"20 is greater than 18\" </font>; <br>
                 "\t""\t"} <br>
                 "\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output_if_example">
           <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t"<font color=#ff0f0f><b>20 is greater than 18</b></font>
                 ]]>
    </string>
    <string name="if_example1">
        <![CDATA[We can also test variables:<br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t"int x =&nbsp; <font color=#ff0f0f>20</font>; <br>
                 "\t""\t"int y =&nbsp; <font color=#ff0f0f>18</font>; <br>
                 "\t""\t"<font color=#ff0f0f>if</font> &nbsp; (x > y) { <br>
                 "\t""\t""\t""\t"cout << <font color=#ff0f0f> \"x is greater than y\" </font>; <br>
                 "\t""\t"} <br>
                 "\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output_if_example1">
        <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t"<font color=#ff0f0f><b> x is greater than y </b></font>
                 ]]>
    </string>
    <string name="if_explained">
        <![CDATA[<h3><font color=#000000><i>Example Explained</i></font></h3>
                 In the example above we use two variables, <b>x</b> and <b>y</b>, to test whether x is greater than y (using the <font color=#ff0f0f> > </font> operator). As x is 20, and y is 18, and we know that 20 is greater than 18, we print to the screen that \"x is greater than y\".<br>
                 ]]>
    </string>
    <string name="else_content">
         <![CDATA[<h3><font color=#ff0f0f><b>The else Statement</b></font></h3>
                  Use the <font color=#ff0f0f>else</font> statement to specify a block of code to be executed if the condition is <font color=#ff0f0f>false</font>.<br><br>
                  <h3><font color=#000000><b>Syntax</b></font></h3>
                  <font color=#1d70cf>if</font> (condition) { <br>
                  <font color=#20a142>"\t"// <i>block of code to be executed if the condition is true</i></font><br>
                  } <font color=#1d70cf>else</font> (condition) { <br>
                  <font color=#20a142>"\t"// <i>block of code to be executed if the condition is false</i></font><br>
                  }<br>
                 ]]>
    </string>
    <string name="else_example">
        <![CDATA[<h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t"int&nbsp; time =&nbsp; <font color=#ff0f0f>20</font>; <br>
                 "\t""\t"<font color=#ff0f0f>if</font> &nbsp; (time < <font color=#ff0f0f>18</font>) { <br>
                 "\t""\t""\t""\t"cout << <font color=#ff0f0f> \"Good day.\" </font>; <br>
                 "\t""\t"} <font color=#ff0f0f> else </font>{ <br>
                 "\t""\t""\t""\t"cout << <font color=#ff0f0f> \"Good evening.\" </font>; <br>
                 "\t""\t"} <br>
                 "\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output_else_example">
          <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t"<font color=#ff0f0f><b> Good evening.</b></font>
                 ]]>
    </string>
    <string name="else_explained">
         <![CDATA[<h3><font color=#000000><i>Example Explained</i></font></h3>
                 In the example above, time (20) is greater than 18, so the condition is <font color=#ff0f0f>false</font>. Because of this, we move on to the <font color=#ff0f0f>else</font> condition and print to the screen \"Good evening\". If the time was less than 18, the program would print \"Good day\".<br>
                 ]]>
    </string>
    <string name="elseif_content">
         <![CDATA[<h3><font color=#ff0f0f><b>The else if Statement</b></font></h3>
                  Use the <font color=#ff0f0f>else if</font> statement to specify a new condition if the first condition is <font color=#ff0f0f>false</font>.<br><br>
                  <h3><font color=#000000><b>Syntax</b></font></h3>
                  <font color=#1d70cf>if</font> (condition1) { <br>
                  <font color=#20a142>"\t"// <i> block of code to be executed if condition1 is true</i></font><br>
                  } <font color=#1d70cf>else if</font> (condition2) { <br>
                  <font color=#20a142>"\t"// <i> block of code to be executed if the condition1 is false and condition2 is true</i></font><br>
                  } <font color=#1d70cf>else</font> { <br>
                  <font color=#20a142>"\t"// <i> block of code to be executed if the condition1 is false and condition2 is false</i></font><br>
                  }<br>
                 ]]>
    </string>
    <string name="elseif_example">
          <![CDATA[<h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t"int&nbsp; time =&nbsp; <font color=#ff0f0f>22</font>; <br>
                 "\t""\t"<font color=#ff0f0f>if</font> &nbsp; (time < <font color=#ff0f0f>10</font>) { <br>
                 "\t""\t""\t""\t"cout << <font color=#ff0f0f> \"Good morning.\" </font>; <br>
                 "\t""\t"}<font color=#ff0f0f> else if</font> &nbsp; (time < <font color=#ff0f0f>20</font>) { <br>
                 "\t""\t""\t""\t"cout << <font color=#ff0f0f> \"Good day.\" </font>; <br>
                 "\t""\t"} <font color=#ff0f0f> else </font>{ <br>
                 "\t""\t""\t""\t"cout << <font color=#ff0f0f> \"Good evening.\" </font>; <br>
                 "\t""\t"} <br>
                 "\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output_elseif_example">
         <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t"<font color=#ff0f0f><b> Good evening.</b></font>
                 ]]>
    </string>
    <string name="elseif_explained">
        <![CDATA[<h3><font color=#000000><i>Example Explained</i></font></h3>
                 In the example above, time (22) is greater than 10, so the <b>first condition</b> is <font color=#ff0f0f>false</font>. The next condition, in the <font color=#ff0f0f>else if</font> statement, is also <font color=#ff0f0f>false</font>,so we move on to the <font color=#ff0f0f>else</font>
                 condition since <b>condition1</b> and <b>condition2</b> is both <font color=#ff0f0f>false</font> - and print to the screen \"Good evening\".<br><br>However, if the time was 14, our program would print \"Good day\".<br>
                 ]]>
    </string>
    <string name="short_if_content">
         <![CDATA[<h3><font color=#ff0f0f><b>Short Hand If..Else (Ternary Operator) </b></font></h3>
                  There is also a short-hand if else, which is known as the <b>ternary operator</b> because it consists of three operands. It can be used to replace multiple lines of code with a single line. It is often used to replace simple if else statements:<br><br>
                  <h3><font color=#000000><b>Syntax</b></font></h3>
                  <i>variable = (condition) ? expressionTrue : expressionFalse;</i><br><br>
                 ]]>
    </string>
    <string name="short_if_example">
         <![CDATA[Instead of writing:<br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t"int&nbsp; time =&nbsp; <font color=#ff0f0f>20</font>; <br>
                 "\t""\t"<font color=#ff0f0f>if</font> &nbsp; (time < <font color=#ff0f0f>18</font>) { <br>
                 "\t""\t""\t""\t"cout << <font color=#ff0f0f> \"Good day.\" </font>; <br>
                 "\t""\t"} <font color=#ff0f0f> else </font>{ <br>
                 "\t""\t""\t""\t"cout << <font color=#ff0f0f> \"Good evening.\" </font>; <br>
                 "\t""\t"} <br>
                 "\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output_short_if_example">
         <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t"<font color=#ff0f0f><b> Good evening.</b></font>
                 ]]>
    </string>
    <string name="short_if_example1">
        <![CDATA[You can simply write:<br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 #include &lt;string&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t"int&nbsp; time =&nbsp; <font color=#ff0f0f>20</font>; <br>
                 "\t""\t"string result&nbsp; = (time < <font color=#ff0f0f>18</font>) ? <font color=#ff0f0f>\"Good day.\"</font>&nbsp; : <font color=#ff0f0f> \"Good evening.\" </font>; <br>
                 "\t""\t""\t""\t"cout << result; <br>
                 "\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output_short_if_example1">
         <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t"<font color=#ff0f0f><b> Good evening.</b></font>
                 ]]>
    </string>


    //string for c++ switch
    <string name="switch_content">
         <![CDATA[Use the <font color=#ff0f0f>switch</font> statement to select one of many code blocks to be executed.<br><br>
                 <h3><font color=#000000><b>Syntax</b></font></h3>
                 <font color=#1d70cf>switch</font> (expression) { <br>
                 "\t""\t""\t"<font color=#1d70cf>case</font> x: <br>
                 "\t""\t""\t""\t""\t"<font color=#20a142> <i>// code block</i> </font><br>
                 "\t""\t""\t""\t""\t"<font color=#1d70cf>break</font> ; <br>
                 "\t""\t""\t"<font color=#1d70cf>case</font> y: <br>
                 "\t""\t""\t""\t""\t"<font color=#20a142> <i>// code block</i> </font><br>
                 "\t""\t""\t""\t""\t"<font color=#1d70cf>break</font> ; <br>
                 "\t""\t""\t"<font color=#1d70cf>default</font> : <br>
                 "\t""\t""\t""\t""\t"<font color=#20a142> <i>// code block</i> </font><br>
                 }<br><br>
                 <b>This is how it works:</b><br><br>
                 "\t""\t""\t"• The <font color=#ff0f0f>switch</font> expression is evaluated once <br>
                 "\t""\t""\t"• The value of the expression is compared with the values of each&nbsp;<font color=#ff0f0f>case</font> <br>
                 "\t""\t""\t"• If there is a match, the associated block of code is executed<br>
                 "\t""\t""\t"• The <font color=#ff0f0f>break</font> and <font color=#ff0f0f>default</font> keywords are optional, and will be described later in this chapter.<br><br>
                 ]]>
    </string>
    <string name="switch_example">
         <![CDATA[The example below uses the weekday number to calculate the weekday name:<br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t"int&nbsp; day =&nbsp; <font color=#ff0f0f>3</font>; <br>
                 "\t""\t"<font color=#1d70cf>switch</font>&nbsp; (day) &nbsp; { <br>
                 "\t""\t"<font color=#1d70cf>case 1</font>: <br>
                 "\t""\t""\t""\t"cout << <font color=#ff0f0f>\"Monday\"</font>; <br>
                 "\t""\t""\t""\t"<font color=#1d70cf>break</font>; <br>
                 "\t""\t"<font color=#1d70cf>case 2</font>: <br>
                 "\t""\t""\t""\t"cout << <font color=#ff0f0f>\"Tuesday\"</font>; <br>
                 "\t""\t""\t""\t"<font color=#1d70cf>break</font>; <br>
                 "\t""\t"<font color=#1d70cf>case 3</font>: <br>
                 "\t""\t""\t""\t"cout << <font color=#ff0f0f>\"Wednesday\"</font>; <br>
                 "\t""\t""\t""\t"<font color=#1d70cf>break</font>; <br>
                 "\t""\t"<font color=#1d70cf>case 4</font>: <br>
                 "\t""\t""\t""\t"cout << <font color=#ff0f0f>\"Thursday\"</font>; <br>
                 "\t""\t""\t""\t"<font color=#1d70cf>break</font>; <br>
                 "\t""\t"<font color=#1d70cf>case 5</font>: <br>
                 "\t""\t""\t""\t"cout << <font color=#ff0f0f>\"Friday\"</font>; <br>
                 "\t""\t""\t""\t"<font color=#1d70cf>break</font>; <br>
                 "\t""\t"<font color=#1d70cf>case 6</font>: <br>
                 "\t""\t""\t""\t"cout << <font color=#ff0f0f>\"Saturday\"</font>; <br>
                 "\t""\t""\t""\t"<font color=#1d70cf>break</font>; <br>
                 "\t""\t"<font color=#1d70cf>case 7</font>: <br>
                 "\t""\t""\t""\t"cout << <font color=#ff0f0f>\"Sunday\"</font>; <br>
                 "\t""\t""\t""\t"<font color=#1d70cf>break</font>; <br>
                 "\t""\t"} <br>
                 "\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output_switch">
           <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t"<font color=#ff0f0f><b> Wednesday</b></font>
                 ]]>
    </string>
    <string name="switch_break">
        <![CDATA[<h3><font color=#ff0f0f><b>The break Keyword</b></font></h3>
                 When C++ reaches a <font color=#ff0f0f>break </font>keyword, it breaks out of the switch block.<br><br>
                 This will stop the execution of more code and case testing inside the block.<br><br>
                 When a match is found, and the job is done, it\'s time for a break. There is no need for more testing.<br>
                 ]]>
    </string>
    <string name="switch_say">
        <![CDATA[A break can save a lot of execution time because it \"ignores\" the execution of all the rest of the code in the switch block.<br>]]>
    </string>
    <string name="default_example">
        <![CDATA[<h3><font color=#ff0f0f><b>The default Keyword</b></font></h3>
                 The <font color=#ff0f0f>default</font> keyword specifies some code to run if there is no case match:<br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t"int&nbsp; day =&nbsp; <font color=#ff0f0f>3</font>; <br>
                 "\t""\t"<font color=#1d70cf>switch</font>&nbsp; (day) &nbsp; { <br>
                 "\t""\t"<font color=#1d70cf>case 6</font>: <br>
                 "\t""\t""\t""\t"cout << <font color=#ff0f0f>\"Today is Saturday\"</font>; <br>
                 "\t""\t""\t""\t"<font color=#1d70cf>break</font>; <br>
                 "\t""\t"<font color=#1d70cf>case 7</font>: <br>
                 "\t""\t""\t""\t"cout << <font color=#ff0f0f>\"Today is Sunday\"</font>; <br>
                 "\t""\t""\t""\t"<font color=#1d70cf>break</font>; <br>
                 "\t""\t"<font color=#1d70cf>default</font>: <br>
                 "\t""\t""\t""\t"cout << <font color=#ff0f0f>\"Looking forward to the Weekend\"</font>; <br>
                 "\t""\t"} <br>
                 "\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="default_output">
         <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t"<font color=#ff0f0f><b>Looking forward to the Weekend</b></font>
                 ]]>
    </string>
    <string name="switch_note">
        <![CDATA[<b>Note:</b> The default keyword must be used as the last statement in the switch, and it does not need a break.<br>]]>
    </string>


    //string for c++ while loop
    <string name="while_loop_content">
        <![CDATA[<h3><font color=#ff0f0f><b>C++ Loops</b></font></h3>
                 Loops can execute a block of code as long as a specified condition is reached.<br><br>
                 Loops are handy because they save time, reduce errors, and they make code more readable.<br><br><br>
                 <h3><font color=#ff0f0f><b>C++ While Loop</b></font></h3>
                 The <font color=#ff0f0f>while</font> loop loops through a block of code as long as a specified condition is <font color=#ff0f0f>true</font>.<br><br>
                 <h3><font color=#000000><b>Syntax</b></font></h3>
                 <font color=#1d70cf>while</font> (condition) { <br>
                 "\t""\t"<font color=#20a142> <i>// code block to be executed</i> </font><br>
                 }<br><br>
                 ]]>
    </string>
    <string name="while_example">
         <![CDATA[In the example below, the code in the loop will run, over and over again, as long as a variable (<font color=#ff0f0f>i</font>) is less than 5:<br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t"int&nbsp; i =&nbsp; <font color=#ff0f0f>0</font>; <br>
                 "\t""\t"<font color=#1d70cf>while</font> &nbsp; (i < <font color=#ff0f0f>5</font>) { <br>
                 "\t""\t""\t""\t"cout << i << <font color=#ff0f0f>\"\\n\" </font>; <br>
                 "\t""\t""\t""\t"i++; <br>
                 "\t""\t"} <br>
                 "\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output_while_example">
        <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>0</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>1</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>2</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>3</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>4</b></font>
                 ]]>
    </string>
    <string name="note_while">
        <![CDATA[<b>Note:</b> Do not forget to increase the variable used in the condition, otherwise the loop will never end!<br>]]>
    </string>
    <string name="do_while_loop_content">
        <![CDATA[<h3><font color=#ff0f0f><b>The Do/While Loop</b></font></h3>
                 The <font color=#ff0f0f>do/while </font> loop is a variant of the <font color=#ff0f0f>while</font> loop. This loop will execute the code block once, before checking if the condition is true, then it will repeat the loop as long as the condition is true.<br><br>
                 <h3><font color=#000000><b>Syntax</b></font></h3>
                 <font color=#1d70cf>do</font> { <br>
                 "\t""\t"<font color=#20a142> <i>// code block to be executed</i> </font><br>
                 }
                 <font color=#1d70cf>while</font> (condition); <br><br>
                 ]]>
    </string>
    <string name="do_while_example">
        <![CDATA[The example below uses a <font color=#ff0f0f>do/while</font> loop. The loop will always be executed at least once, even if the condition is false, because the code block is executed before the condition is tested:<br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t"int&nbsp; i =&nbsp; <font color=#ff0f0f>0</font>; <br>
                 "\t""\t"<font color=#1d70cf>do</font>&nbsp; { <br>
                 "\t""\t""\t""\t"cout << i << <font color=#ff0f0f>\"\\n\" </font>; <br>
                 "\t""\t""\t""\t"i++; <br>
                 "\t""\t"} <br>
                 "\t""\t"<font color=#1d70cf>while</font> &nbsp; (i < <font color=#ff0f0f>5</font>); <br>
                 "\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output_do_while_example">
         <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>0</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>1</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>2</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>3</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>4</b></font>
                 ]]>
    </string>
    <string name="note_do_while">
        <![CDATA[<b>Note:</b> Do not forget to increase the variable used in the condition, otherwise the loop will never end!<br>]]>
    </string>


    //string for c++ for loop
    <string name="for_loop_content">
          <![CDATA[When you know exactly how many times you want to loop through a block of code, use the <font color=#ff0f0f>for </font> loop instead of a <font color=#ff0f0f>while </font> loop:<br><br>
                 <h3><font color=#000000><b>Syntax</b></font></h3>
                 <font color=#1d70cf>for</font> (statement 1;&nbsp; statement 2;&nbsp; statement 3) { <br>
                 "\t""\t"<font color=#20a142> <i>// code block to be executed</i> </font><br>
                 }<br><br><br>
                 <b>Statement 1</b> is executed (one time) before the execution of the code block.<br><br>
                 <b>Statement 2</b> defines the condition for executing the code block.<br><br>
                 <b>Statement 3</b> is executed (every time) after the code block has been executed.<br><br>
                 The example below will print the numbers 0 to 4:<br><br>
                 ]]>
    </string>
    <string name="for_loop_example">
        <![CDATA[<h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t"<font color=#1d70cf>for</font> &nbsp; (int i &nbsp; =&nbsp;<font color=#ff0f0f> 0</font>;&nbsp; i &nbsp; < &nbsp; <font color=#ff0f0f>5</font>;&nbsp; i++)&nbsp; { <br>
                 "\t""\t""\t""\t"cout&nbsp; << &nbsp; i &nbsp; << <font color=#ff0f0f>&nbsp;\"\\n\" </font>; <br>
                 "\t""\t"} <br>
                 "\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output_forloop_example">
           <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>0</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>1</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>2</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>3</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>4</b></font>
                 ]]>
    </string>
    <string name="explain_for_loop">
          <![CDATA[<h3><font color=#000000><i>Example explained</i></font></h3>
                  Statement 1 sets a variable before the loop starts (int i = 0).<br><br>
                  Statement 2 defines the condition for the loop to run (i must be less than 5). If the condition is true, the loop will start over again, if it is false, the loop will end.<br><br>
                  Statement 3 increases a value (i++) each time the code block in the loop has been executed.<br><br><br>
                  ]]>
    </string>
    <string name="for_loop_example1">
        <![CDATA[<h3><font color=#ff0f0f><b>Another Example</b></font></h3>
                 This example will only print even values between 0 and 10:<br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t"<font color=#1d70cf>for</font> &nbsp; (int i &nbsp; =&nbsp;<font color=#ff0f0f> 0</font>;&nbsp; i &nbsp;&lt;= <font color=#ff0f0f>&nbsp;10</font>;&nbsp; i&nbsp; = &nbsp; i&nbsp; + &nbsp;<font color=#ff0f0f>2</font>)&nbsp; { <br>
                 "\t""\t""\t""\t"cout&nbsp; << &nbsp; i &nbsp; << &nbsp;<font color=#ff0f0f>\"\\n\" </font>; <br>
                 "\t""\t"} <br>
                 "\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output_forloop_example1">
           <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>0</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>2</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>4</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>6</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>8</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>10</b></font>
                 ]]>
    </string>


    //string for c++ break and continue
    <string name="break_content_example">
         <![CDATA[<h3><font color=#ff0f0f><b>C++ Break</b></font></h3>
                 You have already seen the <font color=#ff0f0f>break</font> statement used in an earlier chapter of this tutorial. It was used to "jump out" of a <font color=#ff0f0f>switch</font> statement.<br><br>
                 The <font color=#ff0f0f>break</font> statement can also be used to jump out of a <b>loop</b>.<br><br>
                 This example jumps out of the loop when <font color=#ff0f0f> i </font> is equal to 4:<br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t"<font color=#1d70cf>for</font> &nbsp; (int &nbsp; i &nbsp; = &nbsp;<font color=#ff0f0f>0</font>; &nbsp; i &nbsp; < &nbsp;<font color=#ff0f0f>10</font>; &nbsp; i++)&nbsp; { <br>
                 "\t""\t""\t""\t"<font color=#1d70cf>if </font> &nbsp; (i &nbsp; == &nbsp; <font color=#ff0f0f>4</font>)&nbsp; { <br>
                 "\t""\t""\t""\t""\t""\t"<font color=#1d70cf>break</font>; <br>
                 "\t""\t""\t""\t"} <br>
                 "\t""\t""\t""\t"cout &nbsp; << &nbsp; i &nbsp; << &nbsp; <font color=#ff0f0f>\"\\n\" </font>; <br>
                 "\t""\t"} <br>
                 "\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output_break_example">
           <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>0</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>1</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>2</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>3</b></font>
                 ]]>
    </string>
    <string name="continue_content_example">
        <![CDATA[<h3><font color=#ff0f0f><b>C++ Continue</b></font></h3>
                 The <font color=#ff0f0f>continue</font> statement breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop.<br><br>
                 This example skips the value of 4:<br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t"<font color=#1d70cf>for</font> &nbsp; (int &nbsp; i &nbsp; = &nbsp;<font color=#ff0f0f>0</font>; &nbsp; i &nbsp; < &nbsp;<font color=#ff0f0f>10</font>; &nbsp; i++)&nbsp; { <br>
                 "\t""\t""\t""\t"<font color=#1d70cf>if </font> &nbsp; (i &nbsp; == &nbsp; <font color=#ff0f0f>4</font>)&nbsp; { <br>
                 "\t""\t""\t""\t""\t""\t"<font color=#1d70cf>continue</font>; <br>
                 "\t""\t""\t""\t"} <br>
                 "\t""\t""\t""\t"cout &nbsp; << &nbsp; i &nbsp; << &nbsp; <font color=#ff0f0f>\"\\n\" </font>; <br>
                 "\t""\t"} <br>
                 "\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output_continue_example">
           <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>0</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>1</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>2</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>3</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>5</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>6</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>7</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>8</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>9</b></font>
                 ]]>
    </string>
    <string name="break_example">
        <![CDATA[<h3><font color=#ff0f0f><b>Break and Continue in While Loop</b></font></h3>
                 You can also use <font color=#ff0f0f>break</font> and <font color=#ff0f0f>continue</font> in while loops:<br><br>
                 <h3><font color=#20a142><b>Break Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t"<font color=#1d70cf>int</font> &nbsp; i &nbsp; = &nbsp;<font color=#ff0f0f>0</font>; <br>
                 "\t""\t"<font color=#1d70cf>while</font> &nbsp; (i &nbsp; < &nbsp;<font color=#ff0f0f>10</font>) &nbsp; { <br>
                 "\t""\t""\t""\t"cout &nbsp; << &nbsp; i &nbsp; << &nbsp; <font color=#ff0f0f>\"\\n\" </font>; <br>
                 "\t""\t""\t""\t"i++; <br>
                 "\t""\t""\t""\t"<font color=#1d70cf>if </font> &nbsp; (i &nbsp; == &nbsp; <font color=#ff0f0f>4</font>)&nbsp; { <br>
                 "\t""\t""\t""\t""\t""\t"<font color=#1d70cf>break</font>; <br>
                 "\t""\t""\t""\t"} <br>
                 "\t""\t"} <br>
                 "\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output_break_example1">
        <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>0</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>1</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>2</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>3</b></font>
                 ]]>
    </string>
    <string name="continue_example">
        <![CDATA[<h3><font color=#20a142><b>Continue Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t"<font color=#1d70cf>int</font> &nbsp; i &nbsp; = &nbsp;<font color=#ff0f0f>0</font>; <br>
                 "\t""\t"<font color=#1d70cf>while</font> &nbsp; (i &nbsp; < &nbsp;<font color=#ff0f0f>10</font>) &nbsp; { <br>
                 "\t""\t""\t""\t"<font color=#1d70cf>if </font> &nbsp; (i &nbsp; == &nbsp; <font color=#ff0f0f>4</font>)&nbsp; { <br>
                 "\t""\t""\t""\t""\t""\t"i++; <br>
                 "\t""\t""\t""\t""\t""\t"<font color=#1d70cf>continue</font>; <br>
                 "\t""\t""\t""\t"} <br>
                 "\t""\t""\t""\t"cout &nbsp; << &nbsp; i &nbsp; << &nbsp; <font color=#ff0f0f>\"\\n\" </font>; <br>
                 "\t""\t""\t""\t"i++; <br>
                 "\t""\t"} <br>
                 "\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output_continue_example1">
        <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>0</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>1</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>2</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>3</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>5</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>6</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>7</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>8</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>9</b></font>
                 ]]>
    </string>


    //string for c++ arrays
    <string name="array_content">
         <![CDATA[Arrays are used to store multiple values in a single variable, instead of declaring separate variables for each value.<br><br>
                 To declare an array, define the variable type, specify the name of the array followed by <b>square brackets</b> and specify the number of elements it should store:<br><br>
                 "\t""\t"string cars[<font color=#ff0f0f> 4 </font>];<br><br>
                 We have now declared a variable that holds an array of four strings. To insert values to it, we can use an array literal - place the values in a comma-separated list, inside curly braces:<br><br>
                 "\t""\t"string cars[<font color=#ff0f0f> 4 </font>]&nbsp; = &nbsp; {<font color=#ff0f0f>\"Volvo\"</font>, &nbsp; <font color=#ff0f0f>\"BMW\"</font>, &nbsp; <font color=#ff0f0f>\"Ford\"</font>, &nbsp; <font color=#ff0f0f>\"Mazda\"</font>}; <br><br>
                 To create an array of three integers, you could write: <br><br>
                 "\t""\t"<font color=#1d70cf> int </font> &nbsp; myNum[<font color=#ff0f0f> 3 </font>] &nbsp; = &nbsp; {<font color=#ff0f0f> 10 </font>, <font color=#ff0f0f> 20 </font>, <font color=#ff0f0f> 30 </font>}; <br><br><br><br><br>
                 <h3><font color=#ff0f0f><b>Access the Elements of an Array</b></font></h3>
                 You access an array element by referring to the index number. <br><br>
                 This statement accesses the value of the <b>first element</b> in <b>cars</b>: <br><br>
                 ]]>
    </string>
    <string name="example_array">
         <![CDATA[<h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 #include &lt;string&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t"string cars[<font color=#ff0f0f> 4 </font>] &nbsp; = {<font color=#ff0f0f>\"Volvo\"</font>, &nbsp; <font color=#ff0f0f>\"BMW\"</font>, &nbsp; <font color=#ff0f0f>\"Ford\"</font>, &nbsp; <font color=#ff0f0f>\"Mazda\"</font>}; <br>
                 "\t""\t"cout &nbsp; << &nbsp; cars[<font color=#ff0f0f> 0 </font>]; <br>
                 "\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output_access_array">
         <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>Volvo</b></font><br>
                  ]]>
    </string>
    <string name="note_array">
        <![CDATA[<b>Note:</b> Array indexes start with 0: [0] is the first element. [1] is the second element, etc.]]>
    </string>
    <string name="change_array_example">
        <![CDATA[<h3><font color=#ff0f0f><b>Change an Array Element</b></font></h3>
                 To change the value of a specific element, refer to the index number:<br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3>
                 "\t""\t"cars[<font color=#ff0f0f> 0 </font>]&nbsp; = &nbsp; <font color=#ff0f0f>\"Opel\"</font>;<br><br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 #include &lt;string&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t"string cars[<font color=#ff0f0f> 4 </font>] &nbsp; = {<font color=#ff0f0f>\"Volvo\"</font>, &nbsp; <font color=#ff0f0f>\"BMW\"</font>, &nbsp; <font color=#ff0f0f>\"Ford\"</font>, &nbsp; <font color=#ff0f0f>\"Mazda\"</font>}; <br>
                 "\t""\t"cars[<font color=#ff0f0f> 0 </font>]&nbsp; = &nbsp; <font color=#ff0f0f>\"Opel\"</font>;<br>
                 "\t""\t"cout &nbsp; << &nbsp; cars[<font color=#ff0f0f> 0 </font>]; <br>
                 "\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output_change_array">
         <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>Opel</b></font><br>
                  ]]>
    </string>


    //string for c++ references
    <string name="create_references_content">
         <![CDATA[A reference variable is a \"reference\" to an existing variable, and it is created with the <font color=#ff0f0f>&</font> operator:<br><br>
                 "\t""\t"string &nbsp; food &nbsp; = &nbsp; <font color=#ff0f0f> \"Pizza\" </font>;  "\t""\t"<font color=#20a142>// food variable </font><br>
                 "\t""\t"string &nbsp; &meal &nbsp; = &nbsp; food; "\t""\t"<font color=#20a142>// reference to food </font><br><br><br>
                 Now, we can use either the variable name <font color=#ff0f0f> food </font> or the reference name <font color=#ff0f0f> meal </font> to refer to the <font color=#ff0f0f> food </font> variable: <br><br>
                 ]]>
    </string>
    <string name="example_create_ref">
        <![CDATA[<h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 #include &lt;string&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t"string &nbsp; food &nbsp; = &nbsp; <font color=#ff0f0f>\"Pizza\"</font>;  <br>
                 "\t""\t"string &nbsp; &meal &nbsp; = &nbsp; food;<br><br>
                 "\t""\t"cout &nbsp; << &nbsp; food &nbsp; << <font color=#ff0f0f>\"\\n\"</font>; <br>
                 "\t""\t"cout &nbsp; << &nbsp; meal &nbsp; << <font color=#ff0f0f>\"\\n\"</font>;<br>
                 "\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output_create_ref">
           <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>Pizza</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>Pizza</b></font>
                  ]]>
    </string>
    <string name="memory_address_content">
         <![CDATA[In the example from the previous page, the <font color=#ff0f0f>&</font> operator was used to create a reference variable. But it can also be used to get the memory address of a variable; which is the location of where the variable is stored on the computer.<br><br>
                 When a variable is created in C++, a memory address is assigned to the variable. And when we assign a value to the variable, it is stored in this memory address.<br><br>
                 To access it, use the <font color=#ff0f0f>&</font> operator, and the result will represent where the variable is stored: <br><br>
                 ]]>
    </string>
    <string name="example_memory_address">
        <![CDATA[<h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 #include &lt;string&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t"string food &nbsp; = &nbsp; <font color=#ff0f0f>\"Pizza\"</font>; <br><br>
                 "\t""\t"cout &nbsp; << &nbsp; &food; <br>
                 "\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output_memory_address">
          <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>0x6dfed4</b></font>
                  ]]>
    </string>
    <string name="note_memory">
        <![CDATA[<b>Note:</b> The memory address is in hexadecimal form (0x..). Note that you may not get the same result in your program.]]>
    </string>
    <string name="saying">
        <![CDATA[And why is it useful to know the memory address?<br><br>
                <b>References</b> and <b>Pointers</b> are important in C++, because they give you the ability to manipulate the data in the computer\'s memory - <b>which can reduce the code and improve the performance</b>.<br><br>
                These two features are one of the things that make C++ stand out from other programming languages, like <u>Python</u> and <u>Java</u>.
                ]]>
    </string>


    //string for c++ pointers
    <string name="pointers_content">
        <![CDATA[<h3><font color=#ff0f0f><b>Creating Pointers</b></font></h3>
                 You learned from the previous chapter, that we can get the <b>memory address</b> of a variable by using the <font color=#ff0f0f>&</font> operator:<br><br>
                 ]]>
    </string>
    <string name="example_pointers">
          <![CDATA[<h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 #include &lt;string&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t"string &nbsp; food &nbsp; = &nbsp; <font color=#ff0f0f>\"Pizza\"</font>; <br><br>
                 "\t""\t"cout &nbsp; << &nbsp; food &nbsp; << <font color=#ff0f0f>\"\\n\"</font>; <br>
                 "\t""\t"cout &nbsp; << &nbsp; &food &nbsp; << <font color=#ff0f0f>\"\\n\"</font>; <br><br>
                 "\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output_pointers">
         <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>Pizza</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>0x6dfed4</b></font>
                  ]]>
    </string>
    <string name="pointers_content1">
        <![CDATA[A <b>pointer</b> however, is a variable that <b>stores the memory address as its value</b>.<br><br>
                 A pointer variable points to a data type (like <font color=#ff0f0f> int </font> or <font color=#ff0f0f> string </font>) of the same type, and is created with the <font color=#ff0f0f> * </font> operator.
                 The address of the variable you are working with is assigned to the pointer:<br><br>
                ]]>
    </string>
    <string name="example1_pointers">
          <![CDATA[<h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 #include &lt;string&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 int main() { <br>
                 "\t""\t"string &nbsp; food &nbsp; = &nbsp; <font color=#ff0f0f>\"Pizza\"</font>; "\t""\t"<font color=#20a142>// A string variable </font> <br>
                 "\t""\t"string* &nbsp; ptr &nbsp; = &nbsp; &food; "\t""\t""\t"<font color=#20a142>// A pointer variable that stores the address of food </font> <br><br>
                 "\t""\t"<font color=#20a142>// Output the value of food (Pizza) </font> <br>
                 "\t""\t"cout &nbsp; << &nbsp; food &nbsp; << <font color=#ff0f0f>\"\\n\"</font>; <br><br>
                 "\t""\t"<font color=#20a142>// Output the memory address of food </font> <br>
                 "\t""\t"cout &nbsp; << &nbsp; &food &nbsp; << <font color=#ff0f0f>\"\\n\"</font>; <br><br>
                 "\t""\t"<font color=#20a142>// Output the memory address of food with the pointer </font> <br>
                 "\t""\t"cout &nbsp; << &nbsp; ptr &nbsp; << <font color=#ff0f0f>\"\\n\"</font>; <br><br>
                 "\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output1_pointers">
         <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>Pizza</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>0x6dfed4</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>0x6dfed4</b></font>
                  ]]>
    </string>
    <string name="example_explain">
        <![CDATA[<h3><font color=#000000><i>Example Explained</i></font></h3>
                 Create a pointer variable with the name <font color=#ff0f0f> ptr </font>, that <b>points</b> to a <font color=#ff0f0f> string </font> variable, by using the asterisk sign <font color=#ff0f0f> * </font>
                 (<font color=#ff0f0f> string* &nbsp; ptr</font>). Note that the type of the pointer has to match the type of the variable you are working with.<br><br>
                 Use the <font color=#ff0f0f> &</font> operator to store the memory address of the variable called <font color=#ff0f0f> food </font>, and assign it to the pointer.<br><br>
                 Now, <font color=#ff0f0f> ptr</font> holds the value of food\'s memory address.
                 ]]>
    </string>
    <string name="tip_pointer">
         <![CDATA[<b>Tip:</b> There are three ways to declare pointer variables, but the first way is preferred:]]>
    </string>
    <string name="ways_declare_pointer">
        <![CDATA["\t""\t"string* &nbsp; mystring; "\t"<font color=#20a142>// Preferred </font> <br>
                 "\t""\t"string &nbsp; *mystring; <br>
                 "\t""\t"string&nbsp; * &nbsp; mystring;
                 ]]>
    </string>


    //CARD2
    //string for c++ functions
    <string name="function_content">
        <![CDATA[A function is a block of code which only runs when it is called.<br><br>
                 You can pass data, known as parameters, into a function.<br><br>
                 Functions are used to perform certain actions, and they are important for reusing code: Define the code once, and use it many times.<br><br><br>
                 <h3><font color=#ff0f0f><b>Create a Function</b></font></h3>
                 C++ provides some pre-defined functions, such as <font color=#ff0f0f> main() </font>), which is used to execute code. But you can also create your own functions to perform certain actions.<br><br>
                 To create (often referred to as declare) a function, specify the name of the function, followed by parentheses <b>()</b>:<br><br>
                 <h3><font color=#000000><b>Syntax</b></font></h3>
                 <font color=#1d70cf>void</font> &nbsp; myFunction() { <br>
                 "\t""\t"<font color=#20a142> <i>// code to be executed</i> </font><br>
                 }<br><br><br>
                 <h3><font color=#000000><b>Example Explained</b></font></h3>
                 "\t""\t"• <font color=#ff0f0f>myFunction() </font> is the name of the function <br>
                 "\t""\t"• <font color=#ff0f0f>void </font> means that the function does not have a return value. <br>
                 "\t""\t"• inside the function (the body), add code that defines what the function should do <br><br><br>
                 <h3><font color=#ff0f0f><b>Call a Function</b></font></h3>
                 Declared functions are not executed immediately. They are \"saved for later use\", and will be executed later, when they are called.<br><br>
                 To call a function, write the functions name followed by two parentheses <font color=#ff0f0f> () </font> and a semicolon &nbsp; <font color=#ff0f0f> ; </font> <br><br>
                 In the following example, &nbsp;<font color=#ff0f0f> myFunction </font> &nbsp; () is used to print a text (the action), when it is called: <br><br><br>
                 ]]>
    </string>
    <string name="funtion_example">
         <![CDATA[<h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 <font color=#20a142>// Create a function </font> <br>
                 void myFunction() &nbsp; { <br>
                 "\t""\t"cout &nbsp; << &nbsp; <font color=#ff0f0f>\"I just got executed!\"</font>; <br>
                 }<br><br>
                 int main() &nbsp; { <br>
                 "\t""\t"myFunction(); "\t"<font color=#20a142>// call the function </font> <br>
                 "\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output_function">
         <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>I just got executed!</b></font>
                  ]]>
    </string>
    <string name="funtion_example1">
          <![CDATA[A function can be called multiple times: <br><br>
                  <h3><font color=#20a142><b>Example</b></font></h3><br>
                  #include &lt;iostream&gt;  <br>
                  <font color=#1d70cf>using namespace </font> std; <br><br>
                  void myFunction() &nbsp; { <br>
                  "\t""\t"cout &nbsp; << &nbsp; <font color=#ff0f0f>\"I just got executed!\\n\"</font>; <br>
                  }<br><br>
                  int main() &nbsp; { <br>
                  "\t""\t"myFunction(); <br>
                  "\t""\t"myFunction(); <br>
                  "\t""\t"myFunction(); <br>
                  "\t""\t"<font color=#1d70cf>return 0;</font><br>
                  }
                 ]]>
    </string>
    <string name="output1_function">
         <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>I just got executed!</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>I just got executed!</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>I just got executed!</b></font>
                  ]]>
    </string>
    <string name="parameter_arguments_content">
        <![CDATA[Information can be passed to functions as a parameter. Parameters act as variables inside the function.<br><br>
                 Parameters are specified after the function name, inside the parentheses. You can add as many parameters as you want, just separate them with a comma: <br><br><br>
                 <h3><font color=#000000><b>Syntax</b></font></h3>
                 <font color=#1d70cf>void</font> &nbsp; functionName(parameter1, parameter2, parameter3) { <br>
                 "\t""\t"<font color=#20a142> <i>// code to be executed</i> </font><br>
                 }<br><br><br>
                 The following example has a function that takes a <font color=#ff0f0f>&nbsp; string </font> called <b>fname</b> as parameter. When the function is called, we pass along a first name, which is used inside the function to print the full name:<br><br>
                 ]]>
    </string>
    <string name="parameter_arguments_example">
         <![CDATA[<h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 #include &lt;string&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 void myFunction(string &nbsp; fname) &nbsp; { <br>
                 "\t""\t"cout &nbsp; << &nbsp; fname &nbsp; << <font color=#ff0f0f>\"Refsnes\\n\"</font>; <br>
                 }<br><br>
                 int main() &nbsp; { <br>
                 "\t""\t"myFunction(<font color=#ff0f0f>\"Liam\"</font>);  <br>
                 "\t""\t"myFunction(<font color=#ff0f0f>\"Jenny\"</font>);  <br>
                 "\t""\t"myFunction(<font color=#ff0f0f>\"Anja\"</font>);  <br>
                 "\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output_parameter_arguments">
          <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>Liam &nbsp; Refsnes</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>Jenny &nbsp; Refsnes</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>Anja &nbsp; Refsnes</b></font>
                  ]]>
    </string>
    <string name="saying_parameter">
        <![CDATA[When a <b>parameter</b> is passed to the function, it is called an <b>argument</b>. So, from the example above: &nbsp; <font color=#ff0f0f>fname</font> is a <b>parameter</b>,
                 while <font color=#ff0f0f>Liam</font>,&nbsp; <font color=#ff0f0f>Jenny</font>&nbsp;and &nbsp; <font color=#ff0f0f>Anja</font> are <b>arguments</b>.]]>
    </string>
    <string name="default_parameter_content">
        <![CDATA[You can also use a default parameter value, by using the equals sign &nbsp;(<font color=#ff0f0f> = </font>). <br><br>
                 If we call the function without an argument, it uses the default value ("Norway"):<br><br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 #include &lt;string&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 <font color=#1d70cf>void</font> &nbsp; myFunction(string country &nbsp; = &nbsp;<font color=#ff0f0f> \"Norway\"</font>)<br>
                 {<br>
                 "\t""\t"cout &nbsp; << &nbsp; country &nbsp; << <font color=#ff0f0f> \"\\n\"</font>; <br>
                 }<br><br>
                 int main() &nbsp; { <br>
                 "\t""\t"myFunction(<font color=#ff0f0f>\"Sweden\"</font>);  <br>
                 "\t""\t"myFunction(<font color=#ff0f0f>\"India\"</font>);  <br>
                 "\t""\t"myFunction();  <br>
                 "\t""\t"myFunction(<font color=#ff0f0f>\"USA\"</font>);  <br>
                 "\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output_default_parameter">
         <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>Sweden</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>India</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>Norway</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>USA</b></font>
                  ]]>
    </string>
    <string name="saying_default_parameter">
         <![CDATA[A parameter with a default value, is often known as an <b>\"optional parameter\"</b>.
                 From the example above, <font color=#ff0f0f>country</font> is an optional parameter and <font color=#ff0f0f>\"Norway\"</font> is the default value.]]>
    </string>
    <string name="multiple_parameters_content">
        <![CDATA[Inside the function, you can add as many parameters as you want: <br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 #include &lt;string&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 <font color=#1d70cf>void</font> &nbsp; myFunction(string &nbsp; fName, &nbsp; int &nbsp; age)&nbsp; {<br>
                 "\t""\t"cout &nbsp; << &nbsp; fName &nbsp; << <font color=#ff0f0f> \"Refsnes. \"</font> &nbsp; << &nbsp; age &nbsp; << &nbsp; <font color=#ff0f0f> \"years old.&nbsp;\\n\"</font>;<br>
                 }<br><br>
                 int main() &nbsp; { <br>
                 "\t""\t"myFunction(<font color=#ff0f0f>\"Liam\"</font>, &nbsp; <font color=#ff0f0f> 3 </font>);  <br>
                 "\t""\t"myFunction(<font color=#ff0f0f>\"Jenny\"</font>, &nbsp; <font color=#ff0f0f> 14 </font>);  <br>
                 "\t""\t"myFunction(<font color=#ff0f0f>\"Anja\"</font>, &nbsp; <font color=#ff0f0f> 30 </font>);  <br>
                 "\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output_multi_parameter">
         <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t"<font color=#ff0f0f><b>Liam &nbsp; Refsnes. &nbsp; 3 years old.</b></font><br>
                 "\t""\t""\t"<font color=#ff0f0f><b>Jenny &nbsp; Refsnes. &nbsp; 14 years old.</b></font><br>
                 "\t""\t""\t"<font color=#ff0f0f><b>Anja &nbsp; Refsnes. &nbsp; 30 years old.</b></font>
                  ]]>
    </string>
    <string name="note_multi_parameter">
        <![CDATA[Note that when you are working with multiple parameters, the function call must have the same number of arguments as there are parameters,
                and the arguments must be passed in the same order.]]>
    </string>
    <string name="return_value_ex_content">
         <![CDATA[The <font color=#ff0f0f>void</font> keyword, used in the previous examples, indicates that the function should not return a value. If you want the function to return a value, you can use a data type (such as &nbsp; <font color=#ff0f0f>int</font>, &nbsp;<font color=#ff0f0f>string</font>, &nbsp; etc.)
                  instead of <font color=#ff0f0f>void</font>, and use the <font color=#ff0f0f>return</font> keyword inside the function:<br><br>
                  <h3><font color=#20a142><b>Example</b></font></h3><br>
                  #include &lt;iostream&gt;  <br>
                  <font color=#1d70cf>using namespace </font> std; <br><br>
                  int myFunction(int &nbsp; x) &nbsp; { <br>
                  "\t""\t"<font color=#1d70cf>return </font> &nbsp; <font color=#ff0f0f> 5 </font> &nbsp; + &nbsp; x; <br>
                  }<br><br>
                  int main() &nbsp; { <br>
                  "\t""\t"cout &nbsp; << &nbsp; myFunction(<font color=#ff0f0f> 3 </font>); <br>
                  "\t""\t"<font color=#1d70cf>return 0;</font><br>
                  }
                 ]]>
    </string>
    <string name="output_returnval">
             <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>8</b></font>
                  ]]>
    </string>
    <string name="returnVal_example">
         <![CDATA[This example returns the sum of a function with <b>two parameters</b>:<br><br>
                  <h3><font color=#20a142><b>Example</b></font></h3><br>
                  #include &lt;iostream&gt;  <br>
                  <font color=#1d70cf>using namespace </font> std; <br><br>
                  int myFunction(int &nbsp; x, &nbsp; int &nbsp; y) &nbsp; { <br>
                  "\t""\t"<font color=#1d70cf>return</font> &nbsp; x &nbsp; + &nbsp; y; <br>
                  }<br><br>
                  int main() &nbsp; { <br>
                  "\t""\t"cout &nbsp; << &nbsp; myFunction(<font color=#ff0f0f> 5 </font>, &nbsp;<font color=#ff0f0f> 3 </font>); <br>
                  "\t""\t"<font color=#1d70cf>return 0;</font><br>
                  }
                 ]]>
    </string>
    <string name="output_returnVal">
        <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>8</b></font>
                  ]]>
    </string>
    <string name="returnVal_example1">
        <![CDATA[You can also store the result in a variable:<br><br>
                  <h3><font color=#20a142><b>Example</b></font></h3><br>
                  #include &lt;iostream&gt;  <br>
                  <font color=#1d70cf>using namespace </font> std; <br><br>
                  int myFunction(int &nbsp; x, &nbsp; int &nbsp; y) &nbsp; { <br>
                  "\t""\t"<font color=#1d70cf>return</font> &nbsp; x &nbsp; + &nbsp; y; <br>
                  }<br><br>
                  int main() &nbsp; { <br>
                  "\t""\t"int &nbsp; z &nbsp; = &nbsp; myFunction(<font color=#ff0f0f> 5 </font>, &nbsp;<font color=#ff0f0f> 3 </font>); <br>
                  "\t""\t"cout &nbsp; << &nbsp; z;<br>
                  "\t""\t"<font color=#1d70cf>return 0;</font><br>
                  }
                 ]]>
    </string>
    <string name="output1_returnVal">
        <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>8</b></font>
                  ]]>
    </string>
    <string name="pass_by_reference_content">
        <![CDATA[In the examples from the previous page, we used normal variables when we passed parameters to a function. You can also pass a <font color=#1d70cf>reference</font> to the function. This can be useful when you need to change the value of the arguments:<br>]]>
    </string>
    <string name="pass_by_example">
        <![CDATA[<h3><font color=#20a142><b>Example</b></font></h3><br>
                 #include &lt;iostream&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 <font color=#1d70cf>void</font> &nbsp; swapNums(<font color=#1d70cf>int</font> &nbsp; &x, &nbsp; <font color=#1d70cf>int</font> &nbsp; &y)&nbsp; {<br>
                "\t""\t"<font color=#1d70cf>int</font> &nbsp; z &nbsp; = &nbsp; x;<br>
                "\t""\t"x &nbsp; = &nbsp; y;<br>
                "\t""\t"y &nbsp; = &nbsp; z;<br>
                 }<br><br>
                 int main() &nbsp; { <br>
                 "\t""\t"int &nbsp; firstNum &nbsp; = &nbsp <font color=#ff0f0f> 10 </font>;  <br>
                 "\t""\t"int &nbsp; secondNum &nbsp; = &nbsp <font color=#ff0f0f> 20 </font>;  <br><br>
                 "\t""\t"cout &nbsp; << &nbsp; <font color=#ff0f0f>\"Before swap:&nbsp;\"</font> &nbsp; << &nbsp; <font color=#ff0f0f> \"\\n\" </font>;  <br>
                 "\t""\t"cout &nbsp; << &nbsp; firstNum &nbsp; << &nbsp; secondNum &nbsp; << <font color=#ff0f0f> \"\\n\" </font>;  <br><br>
                 "\t""\t"swapNums(firstNum, &nbsp; secondNum); <br><br>
                 "\t""\t"cout &nbsp; << &nbsp; <font color=#ff0f0f>\"After swap:&nbsp;\"</font> &nbsp; << &nbsp; <font color=#ff0f0f> \"\\n\" </font>;  <br>
                 "\t""\t"cout &nbsp; << &nbsp; firstNum &nbsp; << &nbsp; secondNum &nbsp; << <font color=#ff0f0f> \"\\n\" </font>;  <br><br>
                 "\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="output_pass_by">
           <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>Before &nbsp; swap:</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>1020</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>After &nbsp; swap:</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>2010</b></font><br>
                  ]]>
    </string>
    <string name="overloading_content">
          <![CDATA[With <b>function overloading</b>, multiple functions can have the same name with different parameters:<br><br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3>
                 <font color=#1d70cf>int</font> &nbsp; myFunction(<font color=#1d70cf>int</font> &nbsp; x) <br>
                 <font color=#1d70cf>float</font> &nbsp; myFunction(<font color=#1d70cf>float</font> &nbsp; x) <br>
                 <font color=#1d70cf>double</font> &nbsp; myFunction(<font color=#1d70cf>double</font> &nbsp; x, &nbsp; <font color=#1d70cf>double</font> &nbsp; y) <br><br>
                 Consider the following example, which have two functions that add numbers of different type:<br><br>
                 ]]>
    </string>
    <string name="overloading_example">
         <![CDATA[<h3><font color=#20a142><b>Example</b></font></h3><br>
                  #include &lt;iostream&gt;  <br>
                  <font color=#1d70cf>using namespace </font> std; <br><br>
                  int plusFuncInt(int &nbsp; x, &nbsp; int &nbsp; y) &nbsp; { <br>
                  "\t""\t"<font color=#1d70cf>return</font> &nbsp; x &nbsp; + &nbsp; y; <br>
                  }<br><br>
                  double plusFuncDouble(double &nbsp; x, &nbsp; double &nbsp; y) &nbsp; { <br>
                  "\t""\t"<font color=#1d70cf>return</font> &nbsp; x &nbsp; + &nbsp; y; <br>
                  }<br><br>
                  int main() &nbsp; { <br>
                  "\t""\t"int &nbsp; myNum1 &nbsp; = &nbsp; plusFuncInt(<font color=#ff0f0f> 8 </font>, &nbsp;<font color=#ff0f0f> 5 </font>); <br>
                  "\t""\t"double &nbsp; myNum2 &nbsp; = &nbsp; plusFuncDouble(<font color=#ff0f0f> 4.3 </font>, &nbsp;<font color=#ff0f0f> 6.26 </font>); <br>
                  "\t""\t"cout &nbsp; << &nbsp; \"Int:&nbsp;\" &nbsp; << &nbsp; myNum1 &nbsp; << &nbsp; \"\\n\";<br>
                  "\t""\t"cout &nbsp; << &nbsp; \"Double:&nbsp;\" &nbsp; << &nbsp; myNum2;<br>
                  "\t""\t"<font color=#1d70cf>return 0;</font><br>
                  }
                 ]]>
     </string>
    <string name="output_overload">
          <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>Int: &nbsp; 13</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>Double: &nbsp; 10.56</b></font>
                  ]]>
    </string>
    <string name="say_overloading">
          <![CDATA[Instead of defining two functions that should do the same thing, it is better to overload one.<br><br>
                   In the example below, we overload the <font color=#ff0f0f>plusFunc </font> function to work for both <font color=#ff0f0f>int</font> and <font color=#ff0f0f>double</font><br><br>]]>
    </string>
    <string name="overloading_example1">
        <![CDATA[<h3><font color=#20a142><b>Example</b></font></h3><br>
                  #include &lt;iostream&gt;  <br>
                  <font color=#1d70cf>using namespace </font> std; <br><br>
                  int plusFunc(int &nbsp; x, &nbsp; int &nbsp; y) &nbsp; { <br>
                  "\t""\t"<font color=#1d70cf>return</font> &nbsp; x &nbsp; + &nbsp; y; <br>
                  }<br><br>
                  double plusFunc(double &nbsp; x, &nbsp; double &nbsp; y) &nbsp; { <br>
                  "\t""\t"<font color=#1d70cf>return</font> &nbsp; x &nbsp; + &nbsp; y; <br>
                  }<br><br>
                  int main() &nbsp; { <br>
                  "\t""\t"int &nbsp; myNum1 &nbsp; = &nbsp; plusFunc(<font color=#ff0f0f> 8 </font>, &nbsp;<font color=#ff0f0f> 5 </font>); <br>
                  "\t""\t"double &nbsp; myNum2 &nbsp; = &nbsp; plusFunc(<font color=#ff0f0f> 4.3 </font>, &nbsp;<font color=#ff0f0f> 6.26 </font>); <br>
                  "\t""\t"cout &nbsp; << &nbsp; \"Int:&nbsp;\" &nbsp; << &nbsp; myNum1 &nbsp; << &nbsp; \"\\n\";<br>
                  "\t""\t"cout &nbsp; << &nbsp; \"Double:&nbsp;\" &nbsp; << &nbsp; myNum2;<br>
                  "\t""\t"<font color=#1d70cf>return 0;</font><br>
                  }
                 ]]>
    </string>
    <string name="output1_overload">
          <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>Int: &nbsp; 13</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>Double: &nbsp; 10.56</b></font>
                  ]]>
    </string>
    <string name="note_overloading">
         <![CDATA[<b>Note:</b> Multiple functions can have the same name as long as the number and/or type of parameters are different.]]>
    </string>


    //CARD 3
    //string for c++ oop
    <string name="oop_content">
        <![CDATA[<h3><font color=#ff0f0f><b>C++ What is OOP?</b></font></h3>
                OOP stands for Object-Oriented Programming.<br><br>
                Procedural programming is about writing procedures or functions that perform operations on the data, while object-oriented programming is about creating objects that contain both data and functions.<br><br>
                Object-oriented programming has several advantages over procedural programming:<br><br>
                "\t""\t"• OOP is faster and easier to execute<br>
                "\t""\t"• OOP provides a clear structure for the programs<br>
                "\t""\t"• OOP helps to keep the C++ code DRY \"Don\'t Repeat Yourself\", and makes the code easier to maintain, modify and debug<br>
                "\t""\t"• OOP makes it possible to create full reusable applications with less code and shorter development time<br><br>
                <b>Tip:</b> The \"Don\'t Repeat Yourself\" (DRY) principle is about reducing the repetition of code. You should extract out the codes that are common for the application, and place them at a single place and reuse them instead of repeating it.<br><br>
                ]]>
    </string>
    <string name="class_object_">
        <![CDATA[Classes and objects are the two main aspects of object-oriented programming.<br><br>
           Look at the following illustration to see the difference between class and objects:<br>
                ]]>
    </string>
    <string name="explain_classobject">
        <![CDATA[So, a class is a template for objects, and an object is an instance of a class.<br><br>
                When the individual objects are created, they inherit all the variables and functions from the class.<br><br>
                You will learn much more about <u>classes and objects</u> in the next chapter.
                ]]>
    </string>


    //string for c++ classes and object
    <string name="classes_objects_content">
        <![CDATA[C++ is an object-oriented programming language.<br><br>
                Everything in C++ is associated with classes and objects, along with its attributes and methods. For example: in real life, a car is an <b>object</b>. The car has <b>attributes</b>,
                such as weight and color, and <b>methods</b>, such as drive and brake. <br><br>
                Attributes and methods are basically <b>variables</b> and <b>functions</b> that belongs to the class. These are often referred to as \"class members\".<br><br>
                A class is a user-defined data type that we can use in our program, and it works as an object constructor, or a \"blueprint\" for creating objects.<br><br><br>
                <h3><font color=#ff0f0f><b>Create a Class</b></font></h3>
                To create a class, use the <font color=#ff0f0f>class</font> keyword:<br><br><br>
                <h3><font color=#20a142><b>Example</b></font></h3>
                Create a class called "\<font color=#ff0f0f>MyClass</font>\":<br><br>
                "\t""\t"<font color=#1d70cf>class</font> &nbsp; MyClass &nbsp; {  "\t""\t""\t""\t""\t""\t"<font color=#20a142>// The class</font> <br>
                "\t""\t""\t""\t"<font color=#1d70cf>public</font>: "\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t"<font color=#20a142>// Access specifier</font><br>
                "\t""\t""\t""\t""\t""\t"<font color=#1d70cf>int</font> &nbsp; myNum; "\t""\t""\t""\t""\t""\t""\t"<font color=#20a142>// Attribute (int variable)</font><br>
                "\t""\t""\t""\t""\t""\t"string &nbsp; myString; "\t""\t""\t"<font color=#20a142>// Attribute (string variable)</font><br>
                };
                ]]>
    </string>
    <string name="classes_objects_explain">
        <![CDATA[<h3><font color=#000000><b>Example explained</b></font></h3>
                "\t""\t"• The &nbsp;<font color=#ff0f0f>class</font>  keyword is used to create a class called <font color=#ff0f0f>MyClass</font>.<br>
                "\t""\t"• The &nbsp;<font color=#ff0f0f>public</font>  keyword is an <b>access specifier</b>, which specifies that members (attributes and methods) of the class are accessible from outside the class.<br>
                "\t""\t"• Inside the class, there is an integer variable &nbsp;<font color=#ff0f0f>myNum</font> and a string variable <font color=#ff0f0f>myString</font>. When variables are declared within a class, they are called <b>attributes</b>.<br>
                "\t""\t"• At last, end the class definition with a semicolon <font color=#ff0f0f>; </font>.
                ]]>
    </string>
    <string name="classes_objects_example">
        <![CDATA[<h3><font color=#ff0f0f><b>Create an Object</b></font></h3>
                In C++, an object is created from a class. We have already created the class named <font color=#ff0f0f>MyClass</font>, so now we can use this to create objects.<br><br>
                To create an object of <font color=#ff0f0f>MyClass</font>, specify the class name, followed by the object name.<br><br>
                To access the class attributes (<font color=#ff0f0f>myNum</font> and <font color=#ff0f0f>myString</font>), use the dot syntax (<font color=#ff0f0f> . </font>) on the object:<br><br><br>
                <h3><font color=#20a142><b>Example</b></font></h3>
                Create an object called \"<font color=#ff0f0f>myObj</font>\" and access the attributes:<br><br>
                #include &lt;iostream&gt;  <br>
                #include &lt;string&gt;  <br>
                <font color=#1d70cf>using namespace </font> std; <br><br>
                <font color=#1d70cf>class</font> &nbsp; MyClass &nbsp; { "\t""\t" "\t""\t""\t""\t""\t"<font color=#20a142>// The class</font> <br>
                "\t""\t"<font color=#1d70cf>public</font>:  "\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t"<font color=#20a142>// Access specifier</font><br>
                "\t""\t""\t""\t"<font color=#1d70cf>int</font> &nbsp; myNum; "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#20a142>// Attribute (int variable)</font><br>
                "\t""\t""\t""\t"string &nbsp; myString; "\t""\t""\t""\t"<font color=#20a142>// Attribute (string variable)</font><br>
                };<br><br>
                int &nbsp; main() &nbsp; { <br>
                "\t""\t"MyClass &nbsp; myObj; "\t""\t"<font color=#20a142>// Create an object of MyClass</font> <br><br>
                "\t""\t"<font color=#20a142>// Access attributes and set values</font> <br>
                "\t""\t"myObj.myNum &nbsp; = &nbsp; <font color=#ff0f0f>15</font>;<br>
                "\t""\t"myObj.myString &nbsp; = &nbsp; <font color=#ff0f0f>\"Some text\"</font>;<br><br>
                "\t""\t"<font color=#20a142>// Print attribute values </font> <br>
                "\t""\t"cout &nbsp; << &nbsp; myObj.myNum &nbsp; << &nbsp; <font color=#ff0f0f>\"\\n\"</font>;<br>
                "\t""\t"cout &nbsp; << &nbsp; myObj.myString;<br>
                "\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                ]]>
    </string>
    <string name="object_output_example">
         <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>15</b></font><br>
                 "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>Some &nbsp; text</b></font>
                  ]]>
    </string>
    <string name="classes_objects_example1">
        <![CDATA[<h3><font color=#ff0f0f><b>Multiple Objects</b></font></h3>
                You can create multiple objects of one class:<br><br>
                <h3><font color=#20a142><b>Example</b></font></h3>
                #include &lt;iostream&gt;  <br>
                #include &lt;string&gt;  <br>
                <font color=#1d70cf>using namespace </font> std; <br><br>
                <font color=#20a142>// Create a Car class with some attributes</font> <br>
                <font color=#1d70cf>class</font> &nbsp; Car &nbsp; { <br>
                "\t""\t"<font color=#1d70cf>public</font>: <br>
                "\t""\t""\t""\t"string &nbsp; brand; <br>
                "\t""\t""\t""\t"string &nbsp; model; <br>
                "\t""\t""\t""\t"int &nbsp; year; <br>
                };<br><br>
                int &nbsp; main() &nbsp; { <br>
                "\t""\t"<font color=#20a142>// Create an object of Car </font><br>
                "\t""\t"Car &nbsp; carObj1; <br>
                "\t""\t"carObj1.brand &nbsp; = &nbsp; <font color=#ff0f0f>\"BMW\"</font>; <br>
                "\t""\t"carObj1.model &nbsp; = &nbsp; <font color=#ff0f0f>\"X5\"</font>; <br>
                "\t""\t"carObj1.year &nbsp; = &nbsp; <font color=#ff0f0f>1999</font>; <br><br>
                "\t""\t"<font color=#20a142>// Create another object of Car </font><br>
                "\t""\t"Car &nbsp; carObj2; <br>
                "\t""\t"carObj2.brand &nbsp; = &nbsp; <font color=#ff0f0f>\"Ford\"</font>; <br>
                "\t""\t"carObj2.model &nbsp; = &nbsp; <font color=#ff0f0f>\"Mustang\"</font>; <br>
                "\t""\t"carObj2.year &nbsp; = &nbsp; <font color=#ff0f0f>1969</font>; <br><br>
                "\t""\t"<font color=#20a142>// Print attribute values </font><br>
                "\t""\t"cout &nbsp; << &nbsp; carObj1.brand &nbsp; << &nbsp; <font color=#ff0f0f>\"&nbsp;\"</font> &nbsp; << carObj1.model &nbsp; << &nbsp; <font color=#ff0f0f>\"&nbsp;\"</font> &nbsp; << &nbsp; carObj1.year &nbsp; << &nbsp; <font color=#ff0f0f>\"\\n\"</font>;<br>
                "\t""\t"cout &nbsp; << &nbsp; carObj2.brand &nbsp; << &nbsp; <font color=#ff0f0f>\"&nbsp;\"</font> &nbsp; << carObj2.model &nbsp; << &nbsp; <font color=#ff0f0f>\"&nbsp;\"</font> &nbsp; << &nbsp; carObj2.year &nbsp; << &nbsp; <font color=#ff0f0f>\"\\n\"</font>;<br>
                "\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="object_output_example1">
          <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t"<font color=#ff0f0f><b>BMW &nbsp; X5 &nbsp; 1999</b></font><br>
                 "\t""\t""\t""\t""\t"<font color=#ff0f0f><b>Ford &nbsp; Mustang &nbsp; 1969</b></font>
                  ]]>
    </string>


    //string for c++ class methods
    <string name="class_methods_content">
        <![CDATA[Methods are <b>functions</b> that belongs to the class.<br><br>
                There are two ways to define functions that belongs to a class:<br><br>
                "\t""\t"• Inside class definition <br>
                "\t""\t"• Outside class definition <br>
                In the following example, we define a function inside the class, and we name it \"<font color=#ff0f0f>myMethod</font>\".<br><br>
                <b>Note:</b> You access methods just like you access attributes; by creating an object of the class and using the dot syntax (<font color=#ff0f0f> . </font>): <br><br><br>
            ]]>
    </string>
    <string name="class_methods_example">
        <![CDATA[<h3><font color=#20a142><b>Inside Example</b></font></h3>
                #include &lt;iostream&gt;  <br>
                <font color=#1d70cf>using namespace </font> std; <br><br>
                <font color=#1d70cf>class</font> &nbsp; MyClass &nbsp; {"\t""\t""\t""\t""\t""\t" "\t""\t""\t""\t""\t"<font color=#20a142>// The class</font> <br>
                "\t""\t"<font color=#1d70cf>public</font>:"\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t"<font color=#20a142>// Access specifier</font><br>
                "\t""\t""\t""\t"void &nbsp; myMethod() &nbsp; { "\t""\t""\t""\t"<font color=#20a142>// Method function</font><br>
                "\t""\t""\t""\t""\t""\t"cout &nbsp; << &nbsp; <font color=#ff0f0f>\"Hello World!\"</font>;<br>
                "\t""\t""\t""\t"} <br>
                };<br><br>
                int &nbsp; main() &nbsp; { <br>
                "\t""\t"MyClass &nbsp; myObj; "\t""\t""\t"<font color=#20a142>// Create an object of MyClass</font> <br>
                "\t""\t"myObj.myMethod(); "\t""\t"<font color=#20a142>// Call the method </font><br>
                "\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                ]]>
    </string>
    <string name="output_class_methods">
          <![CDATA[
                <font color=#1d70cf>Output:</font><br>
                "\t""\t""\t""\t""\t"<font color=#ff0f0f><b>Hello World!</b></font>
                ]]>
    </string>
    <string name="class_methods_example1">
        <![CDATA[To define a function outside the class definition, you have to declare it inside the class and then define it outside of the class. This is done by specifying the name of the class, followed the scope resolution <font color=#ff0f0f> :: </font> operator, followed by the name of the function:<br><br><br>
                <h3><font color=#20a142><b>Outside Example</b></font></h3>
                #include &lt;iostream&gt;  <br>
                <font color=#1d70cf>using namespace </font> std; <br><br>
                <font color=#1d70cf>class</font> &nbsp; MyClass &nbsp; { "\t""\t""\t""\t""\t""\t" "\t""\t""\t""\t""\t"<font color=#20a142>// The class</font> <br>
                "\t""\t"<font color=#1d70cf>public</font>: "\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t"<font color=#20a142>// Access specifier</font><br>
                "\t""\t""\t""\t"void &nbsp; myMethod(); "\t""\t""\t""\t"<font color=#20a142>// Method/function declaration</font><br>
                };<br><br>
                <font color=#20a142> // Method/function definition outside the class </font> <br>
                 void MyClass::myMethod() &nbsp; { <br>
                "\t""\t"cout &nbsp; << &nbsp; <font color=#ff0f0f>\"Hello World!\"</font>;<br>
                 } <br> <br>
                int &nbsp; main() &nbsp; { <br>
                "\t""\t"MyClass &nbsp; myObj; "\t""\t""\t"<font color=#20a142>// Create an object of MyClass</font> <br>
                "\t""\t"myObj.myMethod(); "\t""\t"<font color=#20a142>// Call the method </font><br>
                "\t""\t"<font color=#1d70cf>return 0;</font><br>
                }
                ]]>
    </string>
    <string name="output1_class_methods">
         <![CDATA[
                <font color=#1d70cf>Output:</font><br>
                "\t""\t""\t""\t""\t"<font color=#ff0f0f><b>Hello World!</b></font>
                ]]>
    </string>
    <string name="class_methods_example2">
        <![CDATA[<h3><font color=#ff0f0f><b>Parameters</b></font></h3>
                 You can also add parameters: <br><br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3>
                 #include &lt;iostream&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 <font color=#1d70cf>class</font> &nbsp; Car &nbsp; { <br>
                 "\t""\t"<font color=#1d70cf>public</font>: <br>
                 "\t""\t""\t""\t"int &nbsp; speed(int maxSpeed); <br>
                 };<br><br>
                 int &nbsp;Car::speed(int maxSpeed) &nbsp; { <br>
                 "\t""\t"<font color=#1d70cf>return </font> &nbsp; maxSpeed; <br>
                 }<br><br>
                 int &nbsp; main() &nbsp; { <br>
                 "\t""\t"Car &nbsp; myObj; "\t" <font color=#20a142> // Create an object of Car </font> <br>
                 "\t""\t"cout &nbsp; << &nbsp; myObj.speed(<font color=#ff0f0f> 200 </font>); "\t"<font color=#20a142>// Call the method with an argument </font><br>
                 "\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                ]]>
    </string>
    <string name="output2_class_methods">
        <![CDATA[
                <font color=#1d70cf>Output:</font><br>
                "\t""\t""\t""\t""\t"<font color=#ff0f0f><b>200</b></font>
                ]]>
    </string>


    //string for c++ constructors
    <string name="constructors_content">
        <![CDATA[A constructor in C++ is a <b>special method</b> that is automatically called when an object of a class is created.<br><br>
                To create a constructor, use the same name as the class, followed by parentheses <font color=#ff0f0f>()</font>:<br><br><br>
                ]]>
    </string>
    <string name="constructors_example">
         <![CDATA[<h3><font color=#20a142><b>Example</b></font></h3>
                #include &lt;iostream&gt;  <br>
                <font color=#1d70cf>using namespace </font> std; <br><br>
                <font color=#1d70cf>class</font> &nbsp; MyClass &nbsp; { "\t""\t""\t""\t""\t""\t" "\t""\t""\t""\t""\t"<font color=#20a142>// The class</font> <br>
                "\t""\t"<font color=#1d70cf>public</font>: "\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t"<font color=#20a142>// Access specifier</font><br>
                "\t""\t""\t""\t"MyClass() &nbsp; { "\t""\t""\t""\t""\t""\t" "\t""\t""\t""\t""\t" <font color=#20a142>// Constructor</font> <br>
                "\t""\t""\t""\t""\t""\t"cout &nbsp; << &nbsp; <font color=#ff0f0f>\"Hello World!\"</font>;<br>
                "\t""\t""\t""\t"}
                };<br><br>
                int &nbsp; main() &nbsp; { <br>
                "\t""\t"MyClass &nbsp; myObj; "\t""\t"<font color=#20a142>// Create an object of MyClass (this will call the constructor)</font> <br>
                "\t""\t"<font color=#1d70cf>return 0;</font><br>
                }<br>
                ]]>
    </string>
    <string name="output_constructors">
          <![CDATA[
                <font color=#1d70cf>Output:</font><br>
                "\t""\t""\t""\t""\t"<font color=#ff0f0f><b>Hello World!</b></font>
                ]]>
    </string>
    <string name="note_constructors">
        <![CDATA[<b>Note:</b> The constructor has the same name as the class, it is always public, and it does not have any return value.]]>
    </string>
    <string name="constructors_example1">
         <![CDATA[Constructors can also take parameters (just like regular functions), which can be useful for setting initial values for attributes.<br><br>
                The following class have <font color=#ff0f0f>brand</font>,&nbsp; <font color=#ff0f0f>model</font> and <font color=#ff0f0f>year</font> attributes, and a constructor with different parameters. Inside the constructor we set the attributes equal to the
                constructor parameters (<font color=#ff0f0f>brand=x</font>,etc).When we call the constructor (by creating an object of the class), we pass parameters to the constructor, which will set the value of the corresponding attributes to the same: <br><br><br><br>
                <h3><font color=#20a142><b>Example</b></font></h3>
                #include &lt;iostream&gt;  <br>
                <font color=#1d70cf>using namespace </font> std; <br><br>
                <font color=#1d70cf>class</font> &nbsp; Car &nbsp; {  "\t""\t""\t""\t""\t""\t""\t""\t""\t""\t" <font color=#20a142>// The class</font> <br>
                "\t""\t"<font color=#1d70cf>public</font>: "\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t" <font color=#20a142>// Access specifier</font> <br>
                "\t""\t""\t""\t"string &nbsp; brand;  "\t""\t""\t""\t""\t" <font color=#20a142>// Attribute</font> <br>
                "\t""\t""\t""\t"string &nbsp; model; "\t""\t""\t""\t" <font color=#20a142>// Attribute</font> <br>
                "\t""\t""\t""\t"int &nbsp; year;  "\t""\t""\t""\t""\t""\t""\t""\t""\t" <font color=#20a142>// Attribute</font><br>
                "\t""\t""\t""\t"Car(string x,&nbsp; string y,&nbsp; int z) { <font color=#20a142>// Constructor with parameters </font><br>
                "\t""\t""\t""\t""\t"brand = x; <br>
                "\t""\t""\t""\t""\t"model = y; <br>
                "\t""\t""\t""\t""\t"year = z;  <br>
                "\t""\t""\t""\t"}
                };<br><br>
                int &nbsp; main() &nbsp; { <br>
                "\t""\t"<font color=#20a142>// Create Car objects and call the constructor with different values </font><br>
                "\t""\t"Car &nbsp; carObj1(<font color=#ff0f0f>\"BMW\"</font>, &nbsp; <font color=#ff0f0f>\"X5\"</font>, &nbsp; <font color=#ff0f0f>1999</font>); <br>
                "\t""\t"Car &nbsp; carObj2(<font color=#ff0f0f>\"Ford\"</font>, &nbsp; <font color=#ff0f0f>\"Mustang\"</font>, &nbsp; <font color=#ff0f0f>1969</font>); <br><br>
                "\t""\t"<font color=#20a142>// Print attribute values </font><br>
                "\t""\t"cout &nbsp; << &nbsp; carObj1.brand &nbsp; << &nbsp; <font color=#ff0f0f>\"&nbsp;\"</font> &nbsp; << carObj1.model &nbsp; << &nbsp; <font color=#ff0f0f>\"&nbsp;\"</font> &nbsp; << &nbsp; carObj1.year &nbsp; << &nbsp; <font color=#ff0f0f>\"\\n\"</font>;<br>
                "\t""\t"cout &nbsp; << &nbsp; carObj2.brand &nbsp; << &nbsp; <font color=#ff0f0f>\"&nbsp;\"</font> &nbsp; << carObj2.model &nbsp; << &nbsp; <font color=#ff0f0f>\"&nbsp;\"</font> &nbsp; << &nbsp; carObj2.year &nbsp; << &nbsp; <font color=#ff0f0f>\"\\n\"</font>;<br>
                "\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                ]]>
    </string>
    <string name="output1_constructors">
         <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t"<font color=#ff0f0f><b>BMW &nbsp; X5 &nbsp; 1999</b></font><br>
                 "\t""\t""\t""\t""\t"<font color=#ff0f0f><b>Ford &nbsp; Mustang &nbsp; 1969</b></font>
                 ]]>
    </string>
    <string name="constructors_example2">
        <![CDATA[Just like functions, constructors can also be defined outside the class. First, declare the constructor inside the class, and then define it outside of the class by specifying the name of the class, followed by the scope resolution <font color=#ff0f0f> :: </font> operator, followed by the name of the constructor (which is the same as the class):<br><br><br>
                <h3><font color=#20a142><b>Example</b></font></h3>
                #include &lt;iostream&gt;  <br>
                <font color=#1d70cf>using namespace </font> std; <br><br>
                <font color=#1d70cf>class</font> &nbsp; Car &nbsp; { "\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t"<font color=#20a142>// The class</font> <br>
                "\t""\t"<font color=#1d70cf>public</font>: "\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t" <font color=#20a142>// Access specifier</font> <br>
                "\t""\t""\t""\t"string &nbsp; brand;  "\t""\t""\t""\t""\t" <font color=#20a142>// Attribute</font> <br>
                "\t""\t""\t""\t"string &nbsp; model; "\t""\t""\t""\t" <font color=#20a142>// Attribute</font> <br>
                "\t""\t""\t""\t"int &nbsp; year; "\t""\t""\t""\t""\t""\t""\t""\t""\t" <font color=#20a142>// Attribute</font><br>
                "\t""\t""\t""\t"Car(string x,&nbsp; string y,&nbsp; int z);"\t" <font color=#20a142>// Constructor declaration </font><br>
                };<br><br>
                <font color=#20a142>// Constructor definition outside the class </font><br>
                Car::Car(string x, string y, int z) { <br>
                "\t""\t"brand = x; <br>
                "\t""\t"model = y; <br>
                "\t""\t"year = z;  <br>
                };<br><br>
                int &nbsp; main() &nbsp; { <br>
                "\t""\t"<font color=#20a142>// Create Car objects and call the constructor with different values </font><br>
                "\t""\t"Car &nbsp; carObj1(<font color=#ff0f0f>\"BMW\"</font>, &nbsp; <font color=#ff0f0f>\"X5\"</font>, &nbsp; <font color=#ff0f0f>1999</font>); <br>
                "\t""\t"Car &nbsp; carObj2(<font color=#ff0f0f>\"Ford\"</font>, &nbsp; <font color=#ff0f0f>\"Mustang\"</font>, &nbsp; <font color=#ff0f0f>1969</font>); <br><br>
                "\t""\t"<font color=#20a142>// Print attribute values </font><br>
                "\t""\t"cout &nbsp; << &nbsp; carObj1.brand &nbsp; << &nbsp; <font color=#ff0f0f>\"&nbsp;\"</font> &nbsp; << carObj1.model &nbsp; << &nbsp; <font color=#ff0f0f>\"&nbsp;\"</font> &nbsp; << &nbsp; carObj1.year &nbsp; << &nbsp; <font color=#ff0f0f>\"\\n\"</font>;<br>
                "\t""\t"cout &nbsp; << &nbsp; carObj2.brand &nbsp; << &nbsp; <font color=#ff0f0f>\"&nbsp;\"</font> &nbsp; << carObj2.model &nbsp; << &nbsp; <font color=#ff0f0f>\"&nbsp;\"</font> &nbsp; << &nbsp; carObj2.year &nbsp; << &nbsp; <font color=#ff0f0f>\"\\n\"</font>;<br>
                "\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                ]]>
    </string>
    <string name="output2_constructors">
        <![CDATA[
                 <font color=#1d70cf>Output:</font><br>
                 "\t""\t""\t""\t""\t"<font color=#ff0f0f><b>BMW &nbsp; X5 &nbsp; 1999</b></font><br>
                 "\t""\t""\t""\t""\t"<font color=#ff0f0f><b>Ford &nbsp; Mustang &nbsp; 1969</b></font>
                 ]]>
    </string>


    //string for c++ access specifiers
    <string name="specifiers_contentEx">
        <![CDATA[By now, you are quite familiar with the <font color=#ff0f0f>public</font> keyword that appears in all of our class examples:<br><br><br>
                <h3><font color=#20a142><b>Example</b></font></h3>
                #include &lt;iostream&gt;  <br>
                <font color=#1d70cf>using namespace </font> std; <br><br>
                <font color=#1d70cf>class</font> &nbsp; MyClass &nbsp; { "\t""\t""\t""\t"<font color=#20a142>// The class</font> <br>
                "\t""\t"<font color=#1d70cf>public</font>: "\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t"<font color=#20a142>// Public access specifier</font><br>
                "\t""\t""\t""\t"int &nbsp; x; "\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t"<font color=#20a142>// Public attribute (int variable)</font><br>
                };<br><br>
                int &nbsp; main() &nbsp; { <br>
                "\t""\t"MyClass &nbsp; myObj; "\t""\t""\t"<font color=#20a142>// Create an object of MyClass </font> <br><br>
                "\t""\t"<font color=#20a142>// Access attributes and set Values </font> <br>
                "\t""\t"myObj.x &nbsp; = &nbsp; <font color=#ff0f0f>15</font>;<br><br>
                "\t""\t"<font color=#20a142>// Print values </font> <br>
                "\t""\t"cout &nbsp; << &nbsp; myObj.x; <br>
                "\t""\t"<font color=#1d70cf>return 0;</font><br>
                }
                ]]>
    </string>
    <string name="output_specifiers">
         <![CDATA[
                <font color=#1d70cf>Output:</font><br>
                "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>15</b></font>
                ]]>
    </string>
    <string name="access_specifier">
        <![CDATA[The <font color=#ff0f0f>public</font> keyword is an <b>access specifier</b>.Access specifiers define how the members (attributes and methods) of a class can be accessed. In the example above, the members are <font color=#ff0f0f>public</font> - which means that they can be accessed and modified from outside the code.<br><br>
                However, what if we want members to be private and hidden from the outside world?<br><br>
                In C++, there are three access specifiers:<br><br>
                "\t""\t"• <font color=#ff0f0f>public</font> - &nbsp; members are accessible from outside the class<br>
                "\t""\t"• <font color=#ff0f0f>private</font> - &nbsp; members cannot be accessed (or viewed) from outside the class<br>
                "\t""\t"• <font color=#ff0f0f>protected</font> - &nbsp; members cannot be accessed from outside the class, however, they can be accessed in inherited classes.<br><br>
                In the following example, we demonstrate the differences between <font color=#ff0f0f>public</font> and <font color=#ff0f0f>private</font> members:<br><br>
                ]]>
    </string>
    <string name="error_example">
        <![CDATA[<h3><font color=#20a142><b>Example</b></font></h3>
                 <font color=#1d70cf>class</font> &nbsp; Myclass { <br>
                "\t""\t"<font color=#1d70cf><b>public</b></font>: "\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t"<font color=#20a142> // Public access specifier </font><br>
                "\t""\t""\t""\t"<font color=#1d70cf>int</font>&nbsp; x; "\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t"<font color=#20a142> // Public attribute </font> <br>
                "\t""\t"<font color=#1d70cf><b>private</b></font>: "\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t"<font color=#20a142> // Private access specifier </font> <br>
                "\t""\t""\t""\t"<font color=#1d70cf>int</font>&nbsp; y; "\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t"<font color=#20a142>// Private attribute</font> <br>
                };<br><br>
                <font color=#1d70cf>int</font> &nbsp; main() &nbsp; { <br>
                "\t""\t"MyClass myObj; <br>
                "\t""\t"myObj.x &nbsp; = &nbsp; <font color=#ff0f0f> 25</font>; "\t""\t""\t" <font color=#20a142>// Allowed (public) </font><br>
                "\t""\t"myObj.y &nbsp; = &nbsp; <font color=#ff0f0f> 50</font>; "\t""\t""\t" <font color=#20a142>// Not allowed (private) </font><br>
                "\t""\t"<font color=#1d70cf>return 0</font>; <br>
                 }<br><br><br>
                 If you try to access a private member, an error occurs:<br><br>
                 <font color=#ff0f0f><b>error: y is private</b></font>
                ]]>
    </string>
    <string name="note_tip_specifiers">
         <![CDATA[<b>Note</b>: It is possible to access private members of a class using a public method inside the same class. <br><br>
                 <b>Tip</b>: It is considered good practice to declare your class attributes as private (as often as you can). This will reduce the possibility of yourself (or others) to mess up the code. This is also the main ingredient of the Encapsulation concept.<br>
                 ]]>
    </string>
    <string name="specifiers_note_ex">
        <![CDATA[<b>Note</b>: By default, all members of a class are <font color=#ff0f0f>private</font> if you don\'t specify an access specifier:<br><br><br>
                <h3><font color=#20a142><b>Example</b></font></h3>
                <font color=#1d70cf>class</font> &nbsp; MyClass &nbsp; { <br>
                 "\t""\t"<font color=#1d70cf>int</font> &nbsp; x &nbsp;  "\t""\t""\t""\t""\t"<font color=#20a142>// Private attribute </font><br>
                 "\t""\t"<font color=#1d70cf>int</font> &nbsp; y &nbsp;  "\t""\t""\t""\t""\t"<font color=#20a142>// Private attribute </font><br>
                  };
                 ]]>
    </string>


    //string for c++ encapsulation
    <string name="encapsulation_content">
        <![CDATA[The meaning of <b>Encapsulation</b>, is to make sure that \"sensitive\" data is hidden from users. To achieve this, you must declare class variables/attributes as <font color=#ff0f0f>private</font> (cannot be accessed from outside the class).
                 If you want others to read or modify the value of a private member, you can provide public <b>get</b> and <b>set</b> methods.<br>
                ]]>
    </string>
    <string name="encapsulation_example">
        <![CDATA[<h3><font color=#ff0f0f><b>Access Private Members</b></font></h3>
                 To access a private attribute, use public <b>\"get\"</b> and <b>\"set\"</b> methods:<br><br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3>
                 #include &lt;iostream&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 <font color=#1d70cf>class</font> &nbsp; Employee &nbsp; { <br>
                 "\t""\t"<font color=#1d70cf>private</font>: <br>
                 "\t""\t""\t""\t"<font color=#20a142>// Private attribute</font> <br>
                 "\t""\t""\t""\t"int &nbsp; salary; <br><br>
                 "\t""\t"<font color=#1d70cf>public</font>: <br>
                 "\t""\t""\t""\t"<font color=#20a142>// Setter</font> <br>
                 "\t""\t""\t""\t"void &nbsp; setSalary(int &nbsp; s) &nbsp; { <br>
                 "\t""\t""\t""\t""\t""\t"salary &nbsp; = &nbsp; s; <br>
                 "\t""\t""\t""\t"}<br>
                 "\t""\t""\t""\t"<font color=#20a142>// Getter</font> <br>
                 "\t""\t""\t""\t"int &nbsp; getSalary() &nbsp; { <br>
                 "\t""\t""\t""\t""\t""\t"<font color=#1d70cf>return</font> &nbsp; salary; <br>
                 "\t""\t""\t""\t"}<br>
                 };<br><br>
                 int &nbsp;main() &nbsp; { <br>
                 "\t""\t"Employee myObj; <br>
                 "\t""\t"myObj.setSalary(<font color=#ff0f0f>50000</font>);<br>
                 "\t""\t"cout &nbsp; << &nbsp; myObj.getSalary(); <br>
                 "\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                ]]>
    </string>
    <string name="encapsulation_output">
          <![CDATA[
                <font color=#1d70cf>Output:</font><br>
                "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>50000</b></font>
                ]]>
    </string>
    <string name="encapsulation_explain_why">
        <![CDATA[<h3><font color=#000000><b>Example Explained</b></font></h3>
                The <font color=#ff0f0f>salary</font> attribute is <font color=#ff0f0f>private</font>, which have restricted access.<br><br>
                The public <font color=#ff0f0f>setSalary()</font> method takes a parameter (<font color=#ff0f0f>s</font>) and assigns it to the <font color=#ff0f0f>salary</font> attribute (salary = s).<br><br>
                The public <font color=#ff0f0f>getSalary()</font> method returns the value of the private <font color=#ff0f0f>salary</font> attribute.<br><br>
                Inside <font color=#ff0f0f>main()</font>, we create an object of the <font color=#ff0f0f>Employee</font> class. Now we can use the <font color=#ff0f0f>setSalary()</font> method to set the value of the private attribute to <font color=#ff0f0f>50000</font>. Then we call the <font color=#ff0f0f>getSalary()</font> method on the object to return the value.<br><br><br><br>
                <h3><font color=#000000><b>Why Encapsulation?</b></font></h3>
                "\t""\t"• It is considered good practice to declare your class attributes as private (as often as you can). Encapsulation ensures better control of your data, because you (or others) can change one part of the code without affecting other parts <br>
                "\t""\t"• Increased security of data
              ]]>
    </string>


    //string for c++ inheritance
    <string name="inheritance_content">
        <![CDATA[In C++, it is possible to inherit attributes and methods from one class to another. We group the \"inheritance concept\" into two categories:<br><br>
                "\t""\t"• <b>derived class</b> (child) - the class that inherits from another class <br>
                "\t""\t"• <b>base class</b> (parent) - the class being inherited from <br><br>
                To inherit from a class, use the <font color=#ff0f0f> : </font> symbol.<br><br>
                In the example below, the <font color=#ff0f0f>Car</font> class (child) inherits the attributes and methods from the <font color=#ff0f0f>Vehicle</font> class (parent):<br><br>
                ]]>
    </string>
    <string name="inheritance_example">
        <![CDATA[<h3><font color=#20a142><b>Example</b></font></h3>
                 #include &lt;iostream&gt;  <br>
                 #include &lt;string&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 <font color=#20a142>// Base class</font> <br>
                 <font color=#1d70cf>class</font> &nbsp; Vehicle &nbsp; { <br>
                 "\t""\t"<font color=#1d70cf>public</font>: <br>
                 "\t""\t""\t""\t"string &nbsp; brand &nbsp; = &nbsp; <font color=#ff0f0f>\"Ford\"</font> ; <br>
                 "\t""\t""\t""\t"void &nbsp; honk() &nbsp; { <br>
                 "\t""\t""\t""\t""\t""\t"cout &nbsp; << &nbsp; <font color=#ff0f0f>\"Tuut, &nbsp; tuut! &nbsp; \\n \"</font> &nbsp; ; <br>
                 "\t""\t""\t""\t"}<br>
                  };<br><br>
                 <font color=#20a142>// Derived class</font> <br>
                 <font color=#1d70cf>class</font> &nbsp; Car: &nbsp; <font color=#1d70cf>public</font> &nbsp;  Vehicle  { <br>
                 "\t""\t"<font color=#1d70cf>public</font>: <br>
                 "\t""\t""\t""\t"string &nbsp; model &nbsp; = &nbsp; <font color=#ff0f0f>\"Mustang\"</font>;<br>
                 };<br><br>
                 int &nbsp;main() &nbsp; { <br>
                 "\t""\t"Car myCar; <br>
                 "\t""\t"myCar.honk();<br>
                 "\t""\t"cout &nbsp; << &nbsp; myCar.brand &nbsp; + &nbsp; <font color=#ff0f0f>\"&nbsp;\"</font> &nbsp; + &nbsp; myCar.model; <br>
                 "\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                ]]>
    </string>
    <string name="inheritance_output">
         <![CDATA[
                <font color=#1d70cf>Output:</font><br>
                "\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>Tuut, &nbsp; tuut!</b></font><br>
                "\t""\t""\t""\t""\t""\t"<font color=#ff0f0f><b>Ford Mustang</b></font><br>
                ]]>
    </string>
    <string name="why_use_inheritancey">
        <![CDATA[<h3><font color=#000000><b>Why And When To Use \"Inheritance\"?</b></font></h3>
                - It is useful for code reusability: reuse attributes and methods of an existing class when you create a new class.]]>
    </string>


    //string for c++ Multilevel Inheritance
    <string name="multilevel_inheritance_content">
         <![CDATA[A class can also be derived from one class, which is already derived from another class.<br><br>
                 In the following example, <font color=#ff0f0f>MyGrandChild</font> is derived from class <font color=#ff0f0f>MyChild</font> (which is derived from <font color=#ff0f0f>MyClass</font>).<br><br>
                 ]]>
    </string>
    <string name="multilevel_inheritance_example">
         <![CDATA[<h3><font color=#20a142><b>Example</b></font></h3>
                 #include &lt;iostream&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 <font color=#20a142>// Parent class</font> <br>
                 <font color=#1d70cf>class</font> &nbsp; MyClass &nbsp; { <br>
                 "\t""\t"<font color=#1d70cf>public</font>: <br>
                 "\t""\t""\t""\t"void &nbsp; myFunction() &nbsp; { <br>
                 "\t""\t""\t""\t""\t""\t"cout &nbsp; << &nbsp; <font color=#ff0f0f>\"Some content in parent class.\"</font> &nbsp; ; <br>
                 "\t""\t""\t""\t"}<br>
                  };<br><br>
                  <font color=#20a142>// Child class</font> <br>
                  <font color=#1d70cf>class</font> &nbsp; MyChild: &nbsp; <font color=#1d70cf>public</font> &nbsp;  MyClass  { <br>
                  };<br><br>
                  <font color=#20a142>// Grandchild class</font> <br>
                  <font color=#1d70cf>class</font> &nbsp; MyGrandChild: &nbsp; <font color=#1d70cf>public</font> &nbsp;  MyChild  { <br>
                  };<br><br>
                 int &nbsp;main() &nbsp; { <br>
                 "\t""\t"MyGrandChild myObj; <br>
                 "\t""\t"myObj.myFunction();<br>
                 "\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                ]]>
    </string>
    <string name="multilevel_inheritance_output">
        <![CDATA[
                <font color=#1d70cf>Output:</font><br>
                "\t""\t""\t""\t""\t"<font color=#ff0f0f><b>Some content in parent class.</b></font><br>
                 ]]>
    </string>


    //string for c++ multiple inheritance
    <string name="multiple_inheritance_content">
        <![CDATA[A class can also be derived from more than one base class, using a <b>comma-separated list</b>:<br><br>
                 ]]>
    </string>
    <string name="multiple_inheritance_example">
        <![CDATA[<h3><font color=#20a142><b>Example</b></font></h3>
                 #include &lt;iostream&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 <font color=#20a142>// Base class</font> <br>
                 <font color=#1d70cf>class</font> &nbsp; MyClass &nbsp; { <br>
                 "\t""\t"<font color=#1d70cf>public</font>: <br>
                 "\t""\t""\t""\t"void &nbsp; myFunction() &nbsp; { <br>
                 "\t""\t""\t""\t""\t""\t"cout &nbsp; << &nbsp; <font color=#ff0f0f>\"Some content in parent class.\\n\"</font> &nbsp; ; <br>
                 "\t""\t""\t""\t"}<br>
                 };<br><br>
                 <font color=#20a142>// Another base class</font> <br>
                 <font color=#1d70cf>class</font> &nbsp; MyOtherClass &nbsp; { <br>
                 "\t""\t"<font color=#1d70cf>public</font> &nbsp; : <br>
                 "\t""\t""\t""\t"void &nbsp; myOtherFunction() &nbsp; { <br>
                 "\t""\t""\t""\t""\t""\t"cout &nbsp; << &nbsp; <font color=#ff0f0f>\"Some content in another class.\\n\"</font> &nbsp; ; <br>
                 "\t""\t""\t""\t"}<br>
                 };<br><br>
                 <font color=#20a142>// Derived class</font> <br>
                 <font color=#1d70cf>class</font> &nbsp; MyChildClass: &nbsp; <font color=#1d70cf>public</font> &nbsp;  MyClass, &nbsp; <font color=#1d70cf>public</font> &nbsp; MyOtherClass  { <br>
                 };<br><br>
                 int &nbsp;main() &nbsp; { <br>
                 "\t""\t"MyChildClass myObj; <br>
                 "\t""\t"myObj.myFunction();<br>
                 "\t""\t"myObj.myOtherFunction();<br>
                 "\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                ]]>
    </string>
    <string name="multiple_inheritance_output">
         <![CDATA[
                <font color=#1d70cf>Output:</font><br>
                "\t""\t""\t""\t""\t"<font color=#ff0f0f><b>Some content in parent class.</b></font><br>
                "\t""\t""\t""\t""\t"<font color=#ff0f0f><b>Some content in another class.</b></font>
                 ]]>
    </string>
    <string name="access_specifiers_content">
         <![CDATA[<h3><font color=#ff0f0f><b>Access Specifiers</b></font></h3>
                 You learned from the Access Specifiers chapter that there are three specifiers available in C++. Until now, we have only used <font color=#ff0f0f>public</font> (members of a class are accessible from outside the class) and
                 <font color=#ff0f0f>private</font> (members can only be accessed within the class). The third specifier, <font color=#ff0f0f>protected</font>, is similar to  <font color=#ff0f0f>private</font>, but it can also be accessed in the <b>inherited</b> class:<br><br>
                 ]]>
    </string>
    <string name="access_specifiers_example">
         <![CDATA[<h3><font color=#20a142><b>Example</b></font></h3>
                 #include &lt;iostream&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 <font color=#20a142>// Base Class</font> <br>
                 <font color=#1d70cf>class</font> &nbsp; Employee &nbsp; { <br>
                 "\t""\t"<font color=#1d70cf>protected</font>: "\t"<font color=#20a142>// Protected access specifier</font> <br>
                 "\t""\t""\t""\t"int &nbsp; salary; <br>
                 };<br><br>
                 <font color=#20a142>// Derived Class</font> <br>
                 <font color=#1d70cf>class</font> &nbsp; Programmer: &nbsp;<font color=#1d70cf>public</font> &nbsp; Employee &nbsp; { <br>
                 "\t""\t"<font color=#1d70cf>public</font>: <br>
                 "\t""\t""\t""\t"int &nbsp; bonus;<br>
                 "\t""\t""\t""\t"void &nbsp; setSalary(int &nbsp; s) &nbsp; { <br>
                 "\t""\t""\t""\t""\t""\t"salary &nbsp; = &nbsp; s; <br>
                 "\t""\t""\t""\t"}<br>
                 "\t""\t""\t""\t"int &nbsp; getSalary() &nbsp; { <br>
                 "\t""\t""\t""\t""\t""\t"<font color=#1d70cf>return</font> &nbsp; salary; <br>
                 "\t""\t""\t""\t"}<br>
                 };<br><br>
                 int &nbsp;main() &nbsp; { <br>
                 "\t""\t"Programmer myObj; <br>
                 "\t""\t"myObj.setSalary(<font color=#ff0f0f>50000</font>);<br>
                 "\t""\t"myObj.bonus &nbsp; = &nbsp; <font color=#ff0f0f>15000</font>;<br>
                 "\t""\t"cout &nbsp; << &nbsp; <font color=#ff0f0f>\"Salary:&nbsp;&nbsp;\"</font> &nbsp; << &nbsp; myObj.getSalary() &nbsp; << &nbsp; <font color=#ff0f0f>\"\\n\"</font> ; <br>
                 "\t""\t"cout &nbsp; << &nbsp; <font color=#ff0f0f>\"Bonus:&nbsp;&nbsp;\"</font> &nbsp; << &nbsp; myObj.bonus &nbsp; << &nbsp; <font color=#ff0f0f>\"\\n\"</font> ; <br>
                 "\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                ]]>
    </string>
    <string name="access_specifiers_output">
           <![CDATA[
                <font color=#1d70cf>Output:</font><br>
                "\t""\t""\t""\t""\t"<font color=#ff0f0f><b>Salary: &nbsp;50000</b></font><br>
                "\t""\t""\t""\t""\t"<font color=#ff0f0f><b>Bonus: &nbsp;15000</b></font>
                 ]]>
    </string>


    //string for c++ polymorphism
    <string name="polymorphism_content">
         <![CDATA[Polymorphism means \"many forms\", and it occurs when we have many classes that are related to each other by inheritance.<br><br>
                 Like we specified in the previous chapter; <u>Inheritance</u> lets us inherit attributes and methods from another class. <b>Polymorphism</b> uses those methods to perform different tasks. This allows us to perform a single action in different ways.<br><br>
                 For example, think of a base class called <font color=#ff0f0f>Animal</font> that has a method called <font color=#ff0f0f>animalSound()</font>.Derived classes of Animals could be Pigs, Cats, Dogs, Birds - And they also have their own implementation of an animal sound (the pig oinks, and the cat meows, etc.):<br><br>
                 ]]>
    </string>
    <string name="polymorphism_example">
         <![CDATA[<h3><font color=#20a142><b>Example</b></font></h3>
                 <font color=#20a142>// Base Class</font> <br>
                 <font color=#1d70cf>class</font> &nbsp; Animal &nbsp; { <br>
                 "\t""\t"<font color=#1d70cf>public</font>: <br>
                 "\t""\t""\t""\t"<font color=#1d70cf>void</font> &nbsp; animalSound() &nbsp; { <br>
                 "\t""\t""\t""\t"cout &nbsp; << &nbsp; <font color=#ff0f0f>\"The animal makes a sound \\n\"</font> &nbsp; ; <br>
                 "\t""\t"} <br>
                 };<br><br>
                 <font color=#20a142>// Derived Class</font> <br>
                 <font color=#1d70cf>class</font> &nbsp; Pig &nbsp; : &nbsp; <font color=#1d70cf>public</font> &nbsp; Animal &nbsp; { <br>
                 "\t""\t"<font color=#1d70cf>public</font>: <br>
                 "\t""\t""\t""\t"<font color=#1d70cf>void</font> &nbsp; animalSound() &nbsp; { <br>
                 "\t""\t""\t""\t"cout &nbsp; << &nbsp; <font color=#ff0f0f>\"The pig says: wee wee \\n\"</font> &nbsp; ; <br>
                 "\t""\t"} <br>
                 };<br><br>
                 <font color=#20a142>// Derived Class</font> <br>
                 <font color=#1d70cf>class</font> &nbsp; Dog &nbsp; : &nbsp; <font color=#1d70cf>public</font> &nbsp; Animal &nbsp; { <br>
                 "\t""\t"<font color=#1d70cf>public</font>: <br>
                 "\t""\t""\t""\t"<font color=#1d70cf>void</font> &nbsp; animalSound() &nbsp; { <br>
                 "\t""\t""\t""\t"cout &nbsp; << &nbsp; <font color=#ff0f0f>\"The dog says: bow wow \\n\"</font> &nbsp; ; <br>
                 "\t""\t"} <br>
                 };
                ]]>
    </string>
    <string name="remember_polymorphism">
        <![CDATA[Remember from the <u>Inheritance</u> chapter that we use the <font color=#ff0f0f> : </font> symbol to inherit from a class.]]>
    </string>
    <string name="polymorphism_example1">
        <![CDATA[Now we can create <font color=#ff0f0f>Pig</font> and <font color=#ff0f0f>Dog</font> objects and override the <font color=#ff0f0f>animalSound()</font> method: <br><br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3>
                 #include &lt;iostream&gt;  <br>
                 #include &lt;string&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 <font color=#20a142>// Base Class</font> <br>
                 <font color=#1d70cf>class</font> &nbsp; Animal &nbsp; { <br>
                 "\t""\t"<font color=#1d70cf>public</font>: <br>
                 "\t""\t""\t""\t"<font color=#1d70cf>void</font> &nbsp; animalSound() &nbsp; { <br>
                 "\t""\t""\t""\t"cout &nbsp; << &nbsp; <font color=#ff0f0f>\"The animal makes a sound \\n\"</font> &nbsp; ; <br>
                 "\t""\t"} <br>
                 };<br><br>
                 <font color=#20a142>// Derived Class</font> <br>
                 <font color=#1d70cf>class</font> &nbsp; Pig &nbsp; : &nbsp; <font color=#1d70cf>public</font> &nbsp; Animal &nbsp; { <br>
                 "\t""\t"<font color=#1d70cf>public</font>: <br>
                 "\t""\t""\t""\t"<font color=#1d70cf>void</font> &nbsp; animalSound() &nbsp; { <br>
                 "\t""\t""\t""\t"cout &nbsp; << &nbsp; <font color=#ff0f0f>\"The pig says: wee wee \\n\"</font> &nbsp; ; <br>
                 "\t""\t"} <br>
                 };<br><br>
                 <font color=#20a142>// Derived Class</font> <br>
                 <font color=#1d70cf>class</font> &nbsp; Dog &nbsp; : &nbsp; <font color=#1d70cf>public</font> &nbsp; Animal &nbsp; { <br>
                 "\t""\t"<font color=#1d70cf>public</font>: <br>
                 "\t""\t""\t""\t"<font color=#1d70cf>void</font> &nbsp; animalSound() &nbsp; { <br>
                 "\t""\t""\t""\t"cout &nbsp; << &nbsp; <font color=#ff0f0f>\"The dog says: bow wow \\n\"</font> &nbsp; ; <br>
                 "\t""\t"} <br>
                 };<br><br>
                 int &nbsp;main() &nbsp; { <br>
                 "\t""\t"Animal &nbsp; myAnimal; <br>
                 "\t""\t"Pig &nbsp; myPig; <br>
                 "\t""\t"Dog &nbsp; myDog; <br><br>
                 "\t""\t"myAnimal.animalSound();<br>
                 "\t""\t"myPig.animalSound();<br>
                 "\t""\t"myDog.animalSound();<br>
                 "\t""\t"<font color=#1d70cf>return 0;</font><br>
                 }
                 ]]>
    </string>
    <string name="polymorphism_output1">
           <![CDATA[
                <font color=#1d70cf>Output:</font><br>
                "\t""\t""\t""\t""\t"<font color=#ff0f0f><b>The animal makes a sound</b></font><br>
                "\t""\t""\t""\t""\t"<font color=#ff0f0f><b>The pig says: wee wee</b></font><br>
                "\t""\t""\t""\t""\t"<font color=#ff0f0f><b>The dog says: bow wow</b></font><br>
                 ]]>
    </string>
    <string name="why_use_polymorphism">
        <![CDATA[<h3><font color=#000000><b>Why And When To Use \"Inheritance\" and \"Polymorphism\"? </b></font></h3> 
                 - It is useful for code reusability: reuse attributes and methods of an existing class when you create a new class.]]>
    </string>


    //string for c++ files
    <string name="files_content">
        <![CDATA[The <font color=#ff0f0f>fstream</font> library allows us to work with files.<br><br>
                 To use the <font color=#ff0f0f>fstream</font> library, include both the standard <font color=#ff0f0f> &lt;iostream&gt; </font> AND the <font color=#ff0f0f> &lt;fstream&gt; </font> header file: <br><br>
                 <h3><font color=#20a142><b>Example</b></font></h3>
                 #include &lt;iostream&gt;  <br>
                 #include &lt;fstream&gt;  <br><br><br>
                 There are three classes included in the <font color=#ff0f0f>fstream</font> library, which are used to create, write or read files:<br>
                 ]]>
    </string>
    <string name="create_file_ex">
        <![CDATA[<h3><font color=#ff0f0f><b>Create and Write To a File</b></font></h3>
                To create a file, use either the <font color=#ff0f0f>ofstream</font> or <font color=#ff0f0f>fstream</font> class, and specify the name of the file.<br><br>
                To write to the file, use the insertion operator (<font color=#ff0f0f> << </font>).<br><br><br>
                <h3><font color=#20a142><b>Example</b></font></h3>
                #include &lt;iostream&gt;  <br>
                #include &lt;fstream&gt;  <br>
                using namespace std;<br><br>
                <font color=#1d70cf>int</font> main() &nbsp; { <br>
                "\t""\t"<font color=#20a142>// Create and open a text file</font> <br>
                "\t""\t"ofstream MyFile(<font color=#ff0f0f>\"filename.txt\"</font>); <br><br>
                "\t""\t"<font color=#20a142>// Write to the file</font> <br>
                "\t""\t"ofstream MyFile &nbsp; << &nbsp; <font color=#ff0f0f>\"Files can be tricky, but it is fun enough!\"</font>; <br><br>
                "\t""\t"<font color=#20a142>// Close the file</font> <br>
                "\t""\t"MyFile.close();
                 }
                ]]>
    </string>
    <string name="close_file">
        <![CDATA[<h3><font color=#000000><b>Why do we close the file?</b></font></h3>
                 It is considered good practice, and it can clean up unnecessary memory space.<br>]]>
    </string>
    <string name="read_file_example">
        <![CDATA[<h3><font color=#ff0f0f><b>Read a File</b></font></h3>
                To read from a file, use either the <font color=#ff0f0f>ifstream</font> or <font color=#ff0f0f>fstream</font> class, and the name of the file.<br><br>
                Note that we also use a <font color=#ff0f0f> while </font> loop together with the <font color=#ff0f0f>getline()</font> function (which belongs to the <font color=#ff0f0f>ifstream</font>
                class) to read the file line by line, and to print the content of the file:.<br><br><br>
                <h3><font color=#20a142><b>Example</b></font></h3>
                #include &lt;iostream&gt;  <br>
                #include &lt;fstream&gt;  <br>
                #include &lt;string&gt;  <br>
                using namespace std;<br><br>
                <font color=#1d70cf>int</font> main() &nbsp; { <br>
                "\t""\t"<font color=#20a142>// Create a text file</font> <br>
                "\t""\t"ofstream MyWriteFile(<font color=#ff0f0f>\"filename.txt\"</font>); <br><br>
                "\t""\t"<font color=#20a142>// Write to the file</font> <br>
                "\t""\t"MyWriteFile &nbsp; << &nbsp; <font color=#ff0f0f>\"Files can be tricky, but it is fun enough!\"</font>; <br><br>
                "\t""\t"<font color=#20a142>// Close the file</font> <br>
                "\t""\t"MyWriteFile.close();<br><br>
                "\t""\t"<font color=#20a142>// Create a text string, which is used to output the text file </font> <br>
                "\t""\t"string myText;<br><br>
                "\t""\t"<font color=#20a142>// Read from the text file </font> <br>
                "\t""\t"ifstream MyReadFile(<font color=#ff0f0f>\"filename.txt\"</font>);<br><br>
                "\t""\t"<font color=#20a142>// Use a while loop together with the getline() function to read the file line by line </font> <br>
                 <font color=#1d70cf>while </font> (getline (MyReadFile, myText)) &nbsp; { <br>
                 "\t""\t"<font color=#20a142>// Output the text from the file </font> <br>
                 "\t""\t"cout &nbsp; << &nbsp; myText;<br>
                 "\t""\t"}<br><br>
                 "\t""\t"<font color=#20a142>// Close the file </font><br>
                 "\t""\t"MyReadFile.close(); <br>
                 }
                ]]>
    </string>
    <string name="output_read_file">
            <![CDATA[
                <font color=#1d70cf>Output:</font><br>
                "\t"<font color=#ff0f0f><b>Files can be tricky, but it is fun enough!</b></font><br>
                 ]]>
    </string>



    //Card four
    // string for c++ how to...
    <string name="program_hello">
        <![CDATA[#include &lt;iostream&gt;  <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 <font color=#1d70cf>int  </font>main() { <br>
                 "\t""\t""\t""\t"cout << <font color=#ff0f0f> \"Hello World!\"</font>; <br>
                 "\t""\t""\t""\t"<font color=#1d70cf>return  </font><font color=#ff0f0f>0</font>;<br>
                  }
                ]]>

    </string>
    <string name="program_pyramid">
        <![CDATA[#include &lt;iostream&gt; <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 <font color=#1d70cf>int  </font>main() <br>
                 { <br>
                 "\t""\t"<font color=#1d70cf>int  </font> space, rows; <br><br>
                 "\t""\t"cout << <font color=#ff0f0f> \"Enter number of rows: \"</font>; <br>
                 "\t""\t"cin >> rows; <br><br>
                 "\t""\t"<font color=#1d70cf>for</font>(int i = <font color=#1d70cf>1</font>, k = <font color=#1d70cf>0</font>; i &lt;= rows; ++i, k = <font color=#1d70cf>0</font>) <br>
                 "\t""\t"{ <br>
                 "\t""\t""\t""\t"<font color=#1d70cf>for</font>(space = <font color=#1d70cf>1</font>; space &lt= rows-i; ++space) <br>
                 "\t""\t""\t""\t"{ <br>
                 "\t""\t""\t""\t""\t""\t"cout << <font color=#ff0f0f>\"&nbsp;&nbsp;\"</font>; <br>
                 "\t""\t""\t""\t"} <br> <br>
                 "\t""\t""\t""\t"<font color=#1d70cf>while</font>(k != 2*i-1) <br>
                 "\t""\t""\t""\t"{ <br>
                 "\t""\t""\t""\t""\t""\t"cout << <font color=#ff0f0f>\"*&nbsp;\"</font>; <br>
                 "\t""\t""\t""\t""\t""\t"++k; <br>
                 "\t""\t""\t""\t"} <br>
                 "\t""\t""\t""\t"cout << <font color=#ff0f0f> endl </font>; <br>
                 "\t""\t"} <br>
                 "\t""\t"<font color=#1d70cf>return  </font><font color=#ff0f0f>0</font>;<br>
                 }
                ]]>
    </string>
    <string name="program_square">
        <![CDATA[#include &lt;iostream&gt; <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 <font color=#1d70cf>int  </font>main() <br>
                 { <br>
                 "\t""\t"<font color=#1d70cf>int  </font> size; <br><br>
                 "\t""\t"cout << <font color=#ff0f0f> \"Input the number of characters for a side: \"</font>; <br>
                 "\t""\t"cin >> size; <br><br>
                 "\t""\t"<font color=#1d70cf>for</font>(int row = <font color=#1d70cf>1</font>; row &lt;= <font color=#1d70cf>size</font>; ++row)<br>
                 "\t""\t"{ <br>
                 "\t""\t""\t""\t"<font color=#1d70cf>for</font>(int col = <font color=#1d70cf>1</font>; col &lt= size; ++col)
                 "\t""\t""\t""\t"{ <br>
                 "\t""\t""\t""\t""\t""\t"cout << <font color=#ff0f0f>\"*&nbsp;\"</font>; <br>
                 "\t""\t""\t""\t"} <br>
                 "\t""\t""\t""\t"cout << <font color=#ff0f0f> endl </font>; <br>
                 "\t""\t"} <br>
                 "\t""\t"<font color=#1d70cf>return  </font><font color=#ff0f0f>0</font>;<br>
                 }
                 ]]>
    </string>
    <string name="program_reverse">
        <![CDATA[#include &lt;iostream&gt; <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 <font color=#1d70cf>int  </font>main() <br>
                 { <br>
                 "\t""\t"<font color=#1d70cf>int  </font> n, reverse= <font color=#1d70cf>0</font>, rem;  <br> <br>
                 "\t""\t"cout << <font color=#ff0f0f> \"Enter a number: \"</font>; <br>
                 "\t""\t"cin >> n; <br><br>
                 "\t""\t"<font color=#1d70cf>while</font>(n!=<font color=#1d70cf>0</font>) <br>
                 "\t""\t"{ <br>
                 "\t""\t""\t""\t"rem=n%10; <br>
                 "\t""\t""\t""\t"reverse=reverse*10+rem; <br>
                 "\t""\t""\t""\t"n/=10; <br>
                 "\t""\t"} <br>
                 "\t""\t""\t""\t"cout<< <font color=#ff0f0f> \"Reversed Number: \" </font> &lt;&lt;reverse&lt;&lt;endl;  <br>
                 "\t""\t"<font color=#1d70cf>return  </font><font color=#ff0f0f>0</font>;<br>
                 }
                 ]]>
    </string>
    <string name="program_sum_digit">
        <![CDATA[#include &lt;iostream&gt; <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 <font color=#1d70cf>int  </font>main() <br>
                 { <br>
                 "\t""\t"<font color=#1d70cf>int  </font> n, sum= <font color=#1d70cf>0</font>, m;  <br> <br>
                 "\t""\t"cout << <font color=#ff0f0f> \"Enter a number: \"</font>; <br>
                 "\t""\t"cin >> n; <br><br>
                 "\t""\t"<font color=#1d70cf>while</font>(n &gt; <font color=#1d70cf>0</font>) <br>
                 "\t""\t"{ <br>
                 "\t""\t""\t""\t"m=n%10;  <br>
                 "\t""\t""\t""\t"sum=sum+m;   <br>
                 "\t""\t""\t""\t"n=n/10;  <br>
                 "\t""\t"}  <br>
                 "\t""\t""\t""\t"cout<< <font color=#ff0f0f> \"Sum is: \" </font> &lt;&lt;sum&lt;&lt;endl;  <br>
                 "\t""\t"<font color=#1d70cf>return  </font><font color=#ff0f0f>0</font>;<br>
                 }
                 ]]>
    </string>
    <string name="program_convert">
         <![CDATA[#include &lt;iostream&gt; <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 <font color=#1d70cf>int  </font>main() <br>
                 { <br>
               	 "\t""\t"<font color=#1d70cf>float</font> meter,feet; <br><br>
	             "\t""\t"cout << <font color=#ff0f0f>\"Enter feet : \" </font>; <br>
                 "\t""\t"cin >> feet ; <br><br>
                 "\t""\t""\t""\t"meter = feet / 3.2808399; <br>
                 "\t""\t""\t""\t"cout<< <font color=#ff0f0f> meter; </font> <br>
                 "\t""\t"<font color=#1d70cf>return  </font><font color=#ff0f0f>0</font>;<br><br>
                 }
                 ]]>
    </string>
    <string name="program_odd_even">
        <![CDATA[#include &lt;iostream&gt; <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 <font color=#1d70cf>int  </font>main() <br>
                 { <br>
                 "\t""\t"<font color=#1d70cf>int</font> number; <br><br>
                 "\t""\t"cout << <font color=#ff0f0f>\"Enter a number: \" </font>; <br>
                 "\t""\t"cin >> number; <br><br>
                 "\t""\t"<font color=#20a142>// True if remainder is 0 </font> <br>
                 "\t""\t"<font color=#1d70cf>if</font>(number%2 == <font color=#ff0f0f>0</font>) <br><br>
                 "\t""\t""\t""\t"cout<< number << <font color=#ff0f0f>\" is an even number\"</font>; <br>
                 "\t""\t"<font color=#1d70cf>else </font> <br>
                 "\t""\t""\t""\t" cout<< number << <font color=#ff0f0f>\" is an odd number\"</font>; <br><br>
                 "\t""\t"<font color=#1d70cf>return  </font><font color=#ff0f0f>0</font>;<br><br>
                 }
                 ]]>
    </string>
    <string name="program_leap_year">
        <![CDATA[#include &lt;iostream&gt; <br>
                 <font color=#1d70cf>using namespace </font> std; <br><br>
                 <font color=#1d70cf>int  </font>main() <br>
                 { <br>
                 "\t""\t"<font color=#1d70cf>int</font> year; <br><br>
                 "\t""\t"cout << <font color=#ff0f0f>\"Enter any year: \"</font>; <br><br>
                 "\t""\t"cin >> year; <br><br>
                 "\t""\t"<font color=#1d70cf>if</font>(year % <font color=#ff0f0f>4 </font> &nbsp; == &nbsp; <font color=#ff0f0f>0</font>) &nbsp; {<br>
                 "\t""\t""\t""\t"<font color=#1d70cf>if</font>(year % <font color=#ff0f0f>100 </font> &nbsp; == &nbsp; <font color=#ff0f0f>0</font>) &nbsp; {<br>
                 "\t""\t""\t""\t""\t""\t"<font color=#1d70cf>if</font>(year % <font color=#ff0f0f>400 </font> &nbsp; == &nbsp; <font color=#ff0f0f>0</font>) <br>
                 "\t""\t""\t""\t""\t""\t""\t"cout << year << <font color=#ff0f0f>\" is a leap year.\" </font>; <br>
                 "\t""\t""\t""\t""\t""\t"<font color=#1d70cf>else</font> <br>
                 "\t""\t""\t""\t""\t""\t""\t"cout << year << <font color=#ff0f0f>\" is not a leap year.\" </font>; <br>
                 "\t""\t""\t""\t"} <br>
                 "\t""\t""\t""\t"<font color=#1d70cf>else</font> <br>
                 "\t""\t""\t""\t""\t""\t"cout << year << <font color=#ff0f0f>\" is a leap year.\" </font>; <br>
                 "\t""\t"} <br>
                 "\t""\t"<font color=#1d70cf>else</font> <br>
                 "\t""\t""\t""\t"cout << year << <font color=#ff0f0f>\" is not a leap year.\" </font>; <br><br>
                 "\t""\t""\t""\t"<font color=#1d70cf>return  </font><font color=#ff0f0f>0</font>;<br>
                 }
                 ]]>
    </string>

    <string name="program_increment" tools:ignore="TypographyDashes">
        <![CDATA[
                #include &lt;iostream&gt; <br>
                <font color=#1d70cf>using namespace </font> std; <br><br>
                <font color=#1d70cf>int</font> x, s1, e1; <br>
                <font color=#1d70cf>int  </font>main() <br>
                { <br><br>
                "\t""\t"x = <font color=#ff0f0f>0</font>;<br>
                "\t""\t"cout << <font color=#ff0f0f>\" Start no.: \" </font>; <br>
                "\t""\t"cin >> s1; <br>
                "\t""\t"cout << <font color=#ff0f0f>\" End no.: \" </font>; <br>
                "\t""\t"cin >> e1; <br>
                "\t""\t"<font color=#1d70cf>while </font>(s1&lt;=e1) &nbsp; { <br>
                "\t""\t""\t""\t"cout << <font color=#ff0f0f>\" \\t \" </font> << s1 << <font color=#ff0f0f>\" \\n \" </font> ; <br>
                "\t""\t""\t""\t"s1++; <br>
                "\t""\t""\t""\t"x--; <br>
                "\t""\t"}<br>
                "\t""\t"<font color=#1d70cf>return  </font><font color=#ff0f0f>0</font>;<br>
                }
                ]]>
    </string>
    <string name="program_multiplication_table">
       <![CDATA[#include &lt;iostream&gt; <br>
                <font color=#1d70cf>using namespace </font> std; <br><br>
                <font color=#1d70cf>int  </font>main() <br>
                { <br><br>
                <font color=#1d70cf>int</font> num= <font color=#ff0f0f>0</font>, i; <br><br>
                <font color=#20a142>//Reading number</font> <br>
                "\t""\t"cout << <font color=#ff0f0f>\"Enter number to print table: \"</font> << endl; <br>
                "\t""\t"cin >> num; <br>
                "\t""\t""\t""\t"<font color=#1d70cf>for</font>(i=<font color=#ff0f0f>1</font>; i&lt;=<font color=#ff0f0f>10</font>; i++) <br>
                "\t""\t"{<br><br>
                <font color=#20a142>//Printing table of number entered by user </font> <br>
                "\t""\t""\t""\t"cout << num << <font color=#ff0f0f>\" x \" </font> << i << <font color=#ff0f0f>\" = \"</font> << num*i << endl; <br>
                "\t""\t"}<br>
                "\t""\t""\t""\t"<font color=#1d70cf>return  </font><font color=#ff0f0f>0</font>;<br>
                }
                ]]>
    </string>



    //string for card 5 C++ Exercise
    <string name="exercise_content" tools:ignore="TypographyDashes">
        <![CDATA[#include <font color=#ff0f0f>(1)</font> _____ <br>
                 using namespace std <font color=#ff0f0f>(2)</font> ____ <br>
                 int main <font color=#ff0f0f>(3)</font> ___ { <br>
                 <font color=#ff0f0f>(4)</font> ____ << \“Hello World!\”; <br>
                 <font color=#ff0f0f>(5)</font> _____ 0; <br> <br>
                 <font color=#ff0f0f>6.</font> ________ is one of the world\'s most popular programming languages. <br>
                 <font color=#ff0f0f>7.</font> ________  operator is used to multiply numbers. <br>
                 <font color=#ff0f0f>8.</font> The keyword used to create a class in C++ is _______. <br>
                 <font color=#ff0f0f>9.</font> The _______  in C++ is a loop control statement which is used to terminate the loop. <br>
                 <font color=#ff0f0f>10.</font> The equal sign is used to ____ _____ to the variable. <br>
                 <font color=#ff0f0f>11.</font> _______  stores integers (whole numbers), without decimals, such as 123 or -123.<br>
                 <font color=#ff0f0f>12.</font> _______  stores floating point numbers, with decimals, such as 19.99 or -19.99. <br>
                 <font color=#ff0f0f>13.</font> _______  stores single characters, such as &#39;a&#39; or &#39;B&#39;. The values of this variable are surrounded by single quotes.<br>
                 <font color=#ff0f0f>14.</font> _______  stores text, such as "\Hello World\". The values of this variable are surrounded by double quotes. <br>
                 <font color=#ff0f0f>15.</font> _______  stores values with two states: true or false. <br>
                 <font color=#ff0f0f>16.</font> _______  are used to store multiple values in a single variable, instead of declaring separate variables for each value. <br>
                 <font color=#ff0f0f>17.</font> Every C++ Statement ends with a? <br>
                 "\t""\t""\t"<font color=#ff0f0f>a.</font> "\t"Period   "\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f>b.</font> "\t"Semicolon   <br>
                 "\t""\t""\t"<font color=#ff0f0f>c.</font> "\t"Quotation  "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f>d.</font> "\t"Comma <br>
                 <font color=#ff0f0f>18.</font> Another thing that always appear in a C++. This is called Function. <br>
                 "\t""\t""\t"<font color=#ff0f0f>a.</font> "\t"using name space std;   "\t""\t""\t""\t""\t"<font color=#ff0f0f>b.</font> "\t"return 0;   <br>
                 "\t""\t""\t"<font color=#ff0f0f>c.</font> "\t"#include&lt;iostream&gt;  "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f>d.</font> "\t"int main () <br>
                 <font color=#ff0f0f>19.</font> This arithmetic operator increases the value of a variable by 1. <br>
                 "\t""\t""\t"<font color=#ff0f0f>a.</font> "\t"%  "\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f>b.</font> "\t"+   <br>
                 "\t""\t""\t"<font color=#ff0f0f>c.</font> "\t"++ "\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f>d.</font> "\t"* <br>
                 <font color=#ff0f0f>20.</font> This arithmetic operator decreases the value of a variable by 1. <br>
                 "\t""\t""\t"<font color=#ff0f0f>a.</font> "\t"-- "\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f>b.</font> "\t"+-   <br>
                 "\t""\t""\t"<font color=#ff0f0f>c.</font> "\t"/ "\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f>d.</font> "\t"* <br>
                 <font color=#ff0f0f>21.</font> Use the if statement to specify a block of C++ code to be executed if a condition is? <br>
                 "\t""\t""\t"<font color=#ff0f0f>a.</font> "\t"true "\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f>b.</font> "\t"false   <br>
                 <font color=#ff0f0f>22.</font> Use the else statement to specify a block of code to be executed if the condition is? <br>
                 "\t""\t""\t"<font color=#ff0f0f>a.</font> "\t"true "\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f>b.</font> "\t"false   <br>
                 <font color=#ff0f0f>23.</font> Use the else if statement to specify a new condition if the first condition is? <br>
                 "\t""\t""\t"<font color=#ff0f0f>a.</font> "\t"true "\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f>b.</font> "\t"false   <br>
                 <font color=#ff0f0f>24.</font> The while loop loops through a block of code as long a specified condition is? <br>
                 "\t""\t""\t"<font color=#ff0f0f>a.</font> "\t"true "\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f>b.</font> "\t"false   <br>
                 <font color=#ff0f0f>25.</font> The do/while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, then it will repeat the loop as long as the condition is true. <br>
                 "\t""\t""\t"<font color=#ff0f0f>a.</font> "\t"true "\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f>b.</font> "\t"false   <br>
                 <font color=#ff0f0f>26.</font> Which Operator is used to multiply numbers?  <br>
                 "\t""\t""\t"<font color=#ff0f0f>a.</font> "\t"#  "\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f>b.</font> "\t"%   <br>
                 "\t""\t""\t"<font color=#ff0f0f>c.</font> "\t"*  "\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f>d.</font> "\t"x <br>
                 <font color=#ff0f0f>27.</font> Which header file let us work with input and output objects? <br>
                 "\t""\t""\t"<font color=#ff0f0f>a.</font> "\t"#include&lt;inputstr&gt; "\t""\t""\t""\t""\t"<font color=#ff0f0f>b.</font> "\t"#include&lt;stream&gt; <br>
                 "\t""\t""\t"<font color=#ff0f0f>c.</font> "\t"#include&lt;iostream&gt;  "\t""\t""\t""\t"<font color=#ff0f0f>d.</font> "\t"#include&lt;iostring&gt; <br>
                 <font color=#ff0f0f>28.</font> How do you start writing an ‘if’ statement in c++? <br>
                 "\t""\t""\t"<font color=#ff0f0f>a.</font> "\t"if x>y then;   "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f>b.</font> "\t"if x>y <br>
                 "\t""\t""\t"<font color=#ff0f0f>c.</font> "\t"if(x>y)  "\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f>d.</font> "\t"if(!x>y) <br>
                 <font color=#ff0f0f>29.</font> How do you start writing a while loop in c++? <br>
                 "\t""\t""\t"<font color=#ff0f0f>a.</font> "\t"while(x>y) "\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f>b.</font> "\t"x>y while { <br>
                 "\t""\t""\t"<font color=#ff0f0f>c.</font> "\t"while x>y  "\t""\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f>d.</font> "\t"while x>y} <br>
                 <font color=#ff0f0f>30.</font> Which keyword is used to return a value inside a method? <br>
                 "\t""\t""\t"<font color=#ff0f0f>a.</font> "\t"get   "\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f>b.</font> "\t"void <br>
                 "\t""\t""\t"<font color=#ff0f0f>c.</font> "\t"break "\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t""\t"<font color=#ff0f0f>d.</font> "\t"return <br>

                 ]]>
    </string>
</resources>


